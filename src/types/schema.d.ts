/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/workflow/task/updateAssignee/{taskIds}/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改任务办理人
     * @description 修改任务办理人
     */
    put: operations['updateAssignee'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processDefinition/updateDefinitionState/{processDefinitionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 激活或者挂起流程定义
     * @description 激活或者挂起流程定义
     */
    put: operations['updateDefinitionState'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processDefinition/migrationDefinition/{currentProcessDefinitionId}/{fromProcessDefinitionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 迁移流程定义
     * @description 迁移流程定义
     */
    put: operations['migrationDefinition'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processDefinition/convertToModel/{processDefinitionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 流程定义转换为模型
     * @description 流程定义转换为模型
     */
    put: operations['convertToModel'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/model/update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改模型信息
     * @description 修改模型信息
     */
    put: operations['update'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/model/editModelXml': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 编辑XMl模型
     * @description 编辑XMl模型
     */
    put: operations['editModel'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/leave': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改请假
     * @description 修改请假
     */
    put: operations['edit'];
    /**
     * 新增请假
     * @description 新增请假
     */
    post: operations['add'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/formManage': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改表单管理
     * @description 修改表单管理
     */
    put: operations['edit_1'];
    /**
     * 新增表单管理
     * @description 新增表单管理
     */
    post: operations['add_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/category': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改流程分类
     * @description 修改流程分类
     */
    put: operations['edit_2'];
    /**
     * 新增流程分类
     * @description 新增流程分类
     */
    post: operations['add_2'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改保存代码生成业务
     * @description 修改保存代码生成业务
     */
    put: operations['editSave'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改用户
     * @description 修改用户
     */
    put: operations['edit_3'];
    /**
     * 新增用户
     * @description 新增用户
     */
    post: operations['add_3'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/resetPwd': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 重置密码
     * @description 重置密码
     */
    put: operations['resetPwd'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 个人信息
     * @description 个人信息
     */
    get: operations['profile'];
    /**
     * 修改用户信息
     * @description 修改用户信息
     */
    put: operations['updateProfile'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/profile/updatePwd': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 重置密码
     * @description 重置密码
     */
    put: operations['updatePwd'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/changeStatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 状态修改
     * @description 状态修改
     */
    put: operations['changeStatus'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/authRole': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 用户授权角色
     * @description 用户授权角色
     */
    put: operations['insertAuthRole'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改保存角色
     * @description 修改保存角色
     */
    put: operations['edit_4'];
    /**
     * 新增角色
     * @description 新增角色
     */
    post: operations['add_4'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/dataScope': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改保存数据权限
     * @description 修改保存数据权限
     */
    put: operations['dataScope'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/changeStatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 状态修改
     * @description 状态修改
     */
    put: operations['changeStatus_1'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/authUser/selectAll': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 批量选择用户授权
     * @description 批量选择用户授权
     */
    put: operations['selectAuthUserAll'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/authUser/cancel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 取消授权用户
     * @description 取消授权用户
     */
    put: operations['cancelAuthUser'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/authUser/cancelAll': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 批量取消授权用户
     * @description 批量取消授权用户
     */
    put: operations['cancelAuthUserAll'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/post': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改岗位
     * @description 修改岗位
     */
    put: operations['edit_5'];
    /**
     * 新增岗位
     * @description 新增岗位
     */
    post: operations['add_5'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/notice': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改通知公告
     * @description 修改通知公告
     */
    put: operations['edit_6'];
    /**
     * 新增通知公告
     * @description 新增通知公告
     */
    post: operations['add_6'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/menu': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改菜单
     * @description 修改菜单
     */
    put: operations['edit_7'];
    /**
     * 新增菜单
     * @description 新增菜单
     */
    post: operations['add_7'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/type': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改字典类型
     * @description 修改字典类型
     */
    put: operations['edit_8'];
    /**
     * 新增字典类型
     * @description 新增字典类型
     */
    post: operations['add_8'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/data': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改保存字典类型
     * @description 修改保存字典类型
     */
    put: operations['edit_9'];
    /**
     * 新增字典类型
     * @description 新增字典类型
     */
    post: operations['add_9'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dept': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改部门
     * @description 修改部门
     */
    put: operations['edit_10'];
    /**
     * 新增部门
     * @description 新增部门
     */
    post: operations['add_10'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/config': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改参数配置
     * @description 修改参数配置
     */
    put: operations['edit_11'];
    /**
     * 新增参数配置
     * @description 新增参数配置
     */
    post: operations['add_11'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/config/updateByKey': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 根据参数键名修改参数配置
     * @description 根据参数键名修改参数配置
     */
    put: operations['updateByKey'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/client': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改客户端管理
     * @description 修改客户端管理
     */
    put: operations['edit_12'];
    /**
     * 新增客户端管理
     * @description 新增客户端管理
     */
    post: operations['add_12'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/client/changeStatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 状态修改
     * @description 状态修改
     */
    put: operations['changeStatus_2'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/config': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改对象存储配置
     * @description 修改对象存储配置
     */
    put: operations['edit_13'];
    /**
     * 新增对象存储配置
     * @description 新增对象存储配置
     */
    post: operations['add_13'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/config/changeStatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 状态修改
     * @description 状态修改
     */
    put: operations['changeStatus_3'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/tree': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改测试树表
     * @description 修改测试树表
     */
    put: operations['edit_14'];
    /**
     * 新增测试树表
     * @description 新增测试树表
     */
    post: operations['add_14'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/demo': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 修改测试单表
     * @description 修改测试单表
     */
    put: operations['edit_15'];
    /**
     * 新增测试单表
     * @description 新增测试单表
     */
    post: operations['add_15'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/transferTask': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 转办任务
     * @description 转办任务
     */
    post: operations['transferTask'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/terminationTask': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 终止任务
     * @description 终止任务
     */
    post: operations['terminationTask'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/startWorkFlow': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 启动任务
     * @description 启动任务
     */
    post: operations['startWorkFlow'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/returnTask/{taskId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 归还（拾取的）任务
     * @description 归还（拾取的）任务
     */
    post: operations['returnTask'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/deleteMultiInstanceExecution': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 会签任务减签
     * @description 会签任务减签
     */
    post: operations['deleteMultiInstanceExecution'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/delegateTask': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 委派任务
     * @description 委派任务
     */
    post: operations['delegateTask'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/completeTask': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 办理任务
     * @description 办理任务
     */
    post: operations['completeTask'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/claim/{taskId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 签收（拾取）任务
     * @description 签收（拾取）任务
     */
    post: operations['claimTask'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/backProcess': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 驳回审批
     * @description 驳回审批
     */
    post: operations['backProcess'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/addMultiInstanceExecution': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 会签任务加签
     * @description 会签任务加签
     */
    post: operations['addMultiInstanceExecution'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/taskUrging': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 任务催办(给当前任务办理人发送站内信，邮件，短信等)
     * @description 任务催办(给当前任务办理人发送站内信，邮件，短信等)
     */
    post: operations['taskUrging'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/deleteRunInstance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 作废流程实例，不会删除历史记录(删除运行中的实例)
     * @description 作废流程实例，不会删除历史记录(删除运行中的实例)
     */
    post: operations['deleteRunInstance'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/cancelProcessApply/{businessKey}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 撤销流程申请
     * @description 撤销流程申请
     */
    post: operations['cancelProcessApply'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processDefinition/deployByFile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 通过zip或xml部署流程定义
     * @description 通过zip或xml部署流程定义
     */
    post: operations['deployByFile'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/model/save': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 新增模型
     * @description 新增模型
     */
    post: operations['saveNewModel'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/model/modelDeploy/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 模型部署
     * @description 模型部署
     */
    post: operations['deploy'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/model/copyModel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 复制模型
     * @description 复制模型
     */
    post: operations['copyModel'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/leave/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出请假列表
     * @description 导出请假列表
     */
    post: operations['export'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/formManage/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出表单管理列表
     * @description 导出表单管理列表
     */
    post: operations['export_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/definitionConfig/saveOrUpdate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 新增流程定义配置
     * @description 新增流程定义配置
     */
    post: operations['saveOrUpdate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/category/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出流程分类列表
     * @description 导出流程分类列表
     */
    post: operations['export_2'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/importTable': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导入表结构（保存）
     * @description 导入表结构（保存）
     */
    post: operations['importTableSave'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/profile/avatar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 头像上传
     * @description 头像上传
     */
    post: operations['avatar'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/importTemplate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 获取导入模板
     * @description 获取导入模板
     */
    post: operations['importTemplate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/importData': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导入数据
     * @description 导入数据
     */
    post: operations['importData'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出用户列表
     * @description 导出用户列表
     */
    post: operations['export_3'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出角色信息列表
     * @description 导出角色信息列表
     */
    post: operations['export_4'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/post/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出岗位列表
     * @description 导出岗位列表
     */
    post: operations['export_5'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/type/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出字典类型列表
     * @description 导出字典类型列表
     */
    post: operations['export_6'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/data/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出字典数据列表
     * @description 导出字典数据列表
     */
    post: operations['export_7'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/config/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出参数配置列表
     * @description 导出参数配置列表
     */
    post: operations['export_8'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/client/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出客户端管理列表
     * @description 导出客户端管理列表
     */
    post: operations['export_9'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/swagger/demo/upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 上传请求
     *      必须使用 @RequestPart 注解标注为文件
     * @description 上传请求
     *      必须使用 @RequestPart 注解标注为文件
     */
    post: operations['upload'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 上传OSS对象存储
     * @description 上传OSS对象存储
     */
    post: operations['upload_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/operlog/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出操作日志记录列表
     * @description 导出操作日志记录列表
     */
    post: operations['export_10'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/online/{tokenId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 强退当前在线设备
     * @description 强退当前在线设备
     */
    post: operations['remove'];
    /**
     * 强退用户
     * @description 强退用户
     */
    delete: operations['forceLogout'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/logininfor/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出系统访问记录列表
     * @description 导出系统访问记录列表
     */
    post: operations['export_11'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/excel/importWithOptions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导入表格
     * @description 导入表格
     */
    post: operations['importWithOptions'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/demo/importData': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导入数据
     * @description 导入数据
     */
    post: operations['importData_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/demo/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 导出测试单表列表
     * @description 导出测试单表列表
     */
    post: operations['export_12'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/batch/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 新增批量方法 可完美替代 saveBatch 秒级插入上万数据 (对mysql负荷较大)
     *
     * @description 新增批量方法 可完美替代 saveBatch 秒级插入上万数据 (对mysql负荷较大)
     *      <p>
     *      3.5.0 版本 增加 rewriteBatchedStatements=true 批处理参数 使 MP 原生批处理可以达到同样的速度
     */
    post: operations['add_16'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/batch/addOrUpdate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 新增或更新 可完美替代 saveOrUpdateBatch 高性能
     *
     * @description 新增或更新 可完美替代 saveOrUpdateBatch 高性能
     *      <p>
     *      3.5.0 版本 增加 rewriteBatchedStatements=true 批处理参数 使 MP 原生批处理可以达到同样的速度
     */
    post: operations['addOrUpdate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/social/callback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 第三方登录回调业务处理 绑定授权
     * @description 第三方登录回调业务处理 绑定授权
     */
    post: operations['socialCallback'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 用户注册
     * @description 用户注册
     */
    post: operations['register'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 退出登录
     * @description 退出登录
     */
    post: operations['logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 登录方法
     * @description 登录方法
     */
    post: operations['login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getTaskUserIdsByAddMultiInstance/{taskId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询工作流任务用户选择加签人员
     * @description 查询工作流任务用户选择加签人员
     */
    get: operations['getTaskUserIdsByAddMultiInstance'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getTaskNodeList/{processInstanceId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取可驳回得任务节点
     * @description 获取可驳回得任务节点
     */
    get: operations['getNodeList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getTaskById/{taskId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取当前任务
     * @description 获取当前任务
     */
    get: operations['getTaskById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getPageByTaskWait': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询当前用户的待办任务
     * @description 查询当前用户的待办任务
     */
    get: operations['getPageByTaskWait'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getPageByTaskFinish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询当前用户的已办任务
     * @description 查询当前用户的已办任务
     */
    get: operations['getPageByTaskFinish'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getPageByTaskCopy': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询当前用户的抄送
     * @description 查询当前用户的抄送
     */
    get: operations['getPageByTaskCopy'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getPageByAllTaskWait': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询当前租户所有待办任务
     * @description 查询当前租户所有待办任务
     */
    get: operations['getPageByAllTaskWait'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getPageByAllTaskFinish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询当前租户所有已办任务
     * @description 查询当前租户所有已办任务
     */
    get: operations['getPageByAllTaskFinish'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getListByDeleteMultiInstance/{taskId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询工作流选择减签人员
     * @description 查询工作流选择减签人员
     */
    get: operations['getListByDeleteMultiInstance'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/task/getInstanceVariable/{taskId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询流程变量
     * @description 查询流程变量
     */
    get: operations['getProcessInstVariable'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/getPageByRunning': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 分页查询正在运行的流程实例
     * @description 分页查询正在运行的流程实例
     */
    get: operations['getPageByRunning'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/getPageByFinish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 分页查询已结束的流程实例
     * @description 分页查询已结束的流程实例
     */
    get: operations['getPageByFinish'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/getPageByCurrent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 分页查询当前登录人单据
     * @description 分页查询当前登录人单据
     */
    get: operations['getPageByCurrent'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/getHistoryRecord/{businessKey}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取审批记录
     * @description 获取审批记录
     */
    get: operations['getHistoryRecord'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/getHistoryList/{businessKey}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 通过业务id获取历史流程图运行中，历史等节点
     * @description 通过业务id获取历史流程图运行中，历史等节点
     */
    get: operations['getHistoryList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/getHistoryImage/{businessKey}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 通过业务id获取历史流程图
     * @description 通过业务id获取历史流程图
     */
    get: operations['getHistoryImage'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processDefinition/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 分页查询
     * @description 分页查询
     */
    get: operations['page'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processDefinition/getListByKey/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询历史流程定义列表
     * @description 查询历史流程定义列表
     */
    get: operations['getListByKey'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processDefinition/definitionXml/{processDefinitionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查看流程定义xml文件
     * @description 查看流程定义xml文件
     */
    get: operations['definitionXml'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processDefinition/definitionImage/{processDefinitionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查看流程定义图片
     * @description 查看流程定义图片
     */
    get: operations['definitionImage'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/model/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 分页查询模型
     * @description 分页查询模型
     */
    get: operations['page_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/model/getInfo/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询模型
     * @description 查询模型
     */
    get: operations['getInfo'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/model/export/zip/{modelIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 导出模型zip压缩包
     * @description 导出模型zip压缩包
     */
    get: operations['exportZip'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/leave/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取请假详细信息
     * @description 获取请假详细信息
     */
    get: operations['getInfo_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/leave/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询请假列表
     * @description 查询请假列表
     */
    get: operations['list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/formManage/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取表单管理详细信息
     * @description 获取表单管理详细信息
     */
    get: operations['getInfo_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/formManage/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询表单管理列表
     * @description 查询表单管理列表
     */
    get: operations['list_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/formManage/list/selectList': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询表单管理列表
     * @description 查询表单管理列表
     */
    get: operations['selectList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/definitionConfig/getByTableNameNotDefId/{tableName}/{definitionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询流程定义配置排除当前查询的流程定义
     * @description 查询流程定义配置排除当前查询的流程定义
     */
    get: operations['getByTableNameNotDefId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/definitionConfig/getByDefId/{definitionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取流程定义配置详细信息
     * @description 获取流程定义配置详细信息
     */
    get: operations['getByDefId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/category/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取流程分类详细信息
     * @description 获取流程分类详细信息
     */
    get: operations['getInfo_3'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/category/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询流程分类列表
     * @description 查询流程分类列表
     */
    get: operations['list_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/{tableId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 修改代码生成业务
     * @description 修改代码生成业务
     */
    get: operations['getInfo_4'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/synchDb/{tableId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 同步数据库
     * @description 同步数据库
     */
    get: operations['synchDb'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/preview/{tableId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 预览代码
     * @description 预览代码
     */
    get: operations['preview'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询代码生成列表
     * @description 查询代码生成列表
     */
    get: operations['genList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/getDataNames': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询数据源名称列表
     * @description 查询数据源名称列表
     */
    get: operations['getCurrentDataSourceNameList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/genCode/{tableId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 生成代码（自定义路径）
     * @description 生成代码（自定义路径）
     */
    get: operations['genCode'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/download/{tableId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 生成代码（下载方式）
     * @description 生成代码（下载方式）
     */
    get: operations['download'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/db/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询数据库列表
     * @description 查询数据库列表
     */
    get: operations['dataList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/column/{tableId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询数据表字段列表
     * @description 查询数据表字段列表
     */
    get: operations['columnList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/batchGenCode': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 批量生成代码
     * @description 批量生成代码
     */
    get: operations['batchGenCode'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/optionselect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据用户ID串批量获取用户基础信息
     * @description 根据用户ID串批量获取用户基础信息
     */
    get: operations['optionselect'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取用户列表
     * @description 获取用户列表
     */
    get: operations['list_3'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/list/dept/{deptId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取部门下的所有用户信息
     * @description 获取部门下的所有用户信息
     */
    get: operations['listByDept'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/getInfo': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取用户信息
     * @description 获取用户信息
     */
    get: operations['getInfo_5'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/deptTree': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取部门树列表
     * @description 获取部门树列表
     */
    get: operations['deptTree'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/authRole/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据用户编号获取授权角色
     * @description 根据用户编号获取授权角色
     */
    get: operations['authRole'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据用户编号获取详细信息
     * @description 根据用户编号获取详细信息
     */
    get: operations['getInfo_6'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据用户编号获取详细信息
     * @description 根据用户编号获取详细信息
     */
    get: operations['getInfo_7'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/social/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询社会化关系列表
     * @description 查询社会化关系列表
     */
    get: operations['list_4'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/{roleId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据角色编号获取详细信息
     * @description 根据角色编号获取详细信息
     */
    get: operations['getInfo_8'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/optionselect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取角色选择框列表
     * @description 获取角色选择框列表
     */
    get: operations['optionselect_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取角色信息列表
     * @description 获取角色信息列表
     */
    get: operations['list_5'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/deptTree/{roleId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取对应角色部门树列表
     * @description 获取对应角色部门树列表
     */
    get: operations['roleDeptTreeselect'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/authUser/unallocatedList': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询未分配用户角色列表
     * @description 查询未分配用户角色列表
     */
    get: operations['unallocatedList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/authUser/allocatedList': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询已分配用户角色列表
     * @description 查询已分配用户角色列表
     */
    get: operations['allocatedList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/post/{postId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据岗位编号获取详细信息
     * @description 根据岗位编号获取详细信息
     */
    get: operations['getInfo_9'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/post/optionselect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取岗位选择框列表
     * @description 获取岗位选择框列表
     */
    get: operations['optionselect_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/post/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取岗位列表
     * @description 获取岗位列表
     */
    get: operations['list_6'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/notice/{noticeId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据通知公告编号获取详细信息
     * @description 根据通知公告编号获取详细信息
     */
    get: operations['getInfo_10'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/notice/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取通知公告列表
     * @description 获取通知公告列表
     */
    get: operations['list_7'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/menu/{menuId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据菜单编号获取详细信息
     * @description 根据菜单编号获取详细信息
     */
    get: operations['getInfo_11'];
    put?: never;
    post?: never;
    /**
     * 删除菜单
     * @description 删除菜单
     */
    delete: operations['remove_13'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/menu/treeselect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取菜单下拉树列表
     * @description 获取菜单下拉树列表
     */
    get: operations['treeselect'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/menu/tenantPackageMenuTreeselect/{packageId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 加载对应租户套餐菜单列表树
     * @description 加载对应租户套餐菜单列表树
     */
    get: operations['tenantPackageMenuTreeselect'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/menu/roleMenuTreeselect/{roleId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 加载对应角色菜单列表树
     * @description 加载对应角色菜单列表树
     */
    get: operations['roleMenuTreeselect'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/menu/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取菜单列表
     * @description 获取菜单列表
     */
    get: operations['list_8'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/menu/getRouters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取路由信息
     * @description 获取路由信息
     */
    get: operations['getRouters'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/type/{dictId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询字典类型详细
     * @description 查询字典类型详细
     */
    get: operations['getInfo_12'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/type/optionselect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取字典选择框列表
     * @description 获取字典选择框列表
     */
    get: operations['optionselect_3'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/type/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询字典类型列表
     * @description 查询字典类型列表
     */
    get: operations['list_9'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/data/{dictCode}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询字典数据详细
     * @description 查询字典数据详细
     */
    get: operations['getInfo_13'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/data/type/{dictType}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据字典类型查询字典数据信息
     * @description 根据字典类型查询字典数据信息
     */
    get: operations['dictType'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/data/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询字典数据列表
     * @description 查询字典数据列表
     */
    get: operations['list_10'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dept/{deptId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据部门编号获取详细信息
     * @description 根据部门编号获取详细信息
     */
    get: operations['getInfo_14'];
    put?: never;
    post?: never;
    /**
     * 删除部门
     * @description 删除部门
     */
    delete: operations['remove_16'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dept/optionselect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取部门选择框列表
     * @description 获取部门选择框列表
     */
    get: operations['optionselect_4'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dept/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取部门列表
     * @description 获取部门列表
     */
    get: operations['list_11'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dept/list/exclude/{deptId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询部门列表（排除节点）
     * @description 查询部门列表（排除节点）
     */
    get: operations['excludeChild'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/config/{configId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据参数编号获取详细信息
     * @description 根据参数编号获取详细信息
     */
    get: operations['getInfo_15'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/config/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取参数配置列表
     * @description 获取参数配置列表
     */
    get: operations['list_12'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/config/configKey/{configKey}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 根据参数键名查询参数值
     * @description 根据参数键名查询参数值
     */
    get: operations['getConfigKey'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/client/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取客户端管理详细信息
     * @description 获取客户端管理详细信息
     */
    get: operations['getInfo_16'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/client/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询客户端管理列表
     * @description 查询客户端管理列表
     */
    get: operations['list_13'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/sse': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 建立 SSE 连接
     * @description 建立 SSE 连接
     */
    get: operations['connect'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/sse/send': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 向特定用户发送消息
     * @description 向特定用户发送消息
     */
    get: operations['send'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/sse/sendAll': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 向所有用户发送消息
     * @description 向所有用户发送消息
     */
    get: operations['send_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/sse/close': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 关闭 SSE 连接
     * @description 关闭 SSE 连接
     */
    get: operations['close'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/sms/code': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 短信验证码
     * @description 短信验证码
     */
    get: operations['smsCode'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询OSS对象存储列表
     * @description 查询OSS对象存储列表
     */
    get: operations['list_14'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/listByIds/{ossIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询OSS对象基于id串
     * @description 查询OSS对象基于id串
     */
    get: operations['listByIds'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/download/{ossId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 下载OSS对象
     * @description 下载OSS对象
     */
    get: operations['download_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/config/{ossConfigId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取对象存储配置详细信息
     * @description 获取对象存储配置详细信息
     */
    get: operations['getInfo_17'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/config/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询对象存储配置列表
     * @description 查询对象存储配置列表
     */
    get: operations['list_15'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/email/code': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 邮箱验证码
     * @description 邮箱验证码
     */
    get: operations['emailCode'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/operlog/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取操作日志记录列表
     * @description 获取操作日志记录列表
     */
    get: operations['list_16'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/online': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取当前用户登录在线设备
     * @description 获取当前用户登录在线设备
     */
    get: operations['getInfo_18'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/online/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取在线用户监控列表
     * @description 获取在线用户监控列表
     */
    get: operations['list_17'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/logininfor/unlock/{userName}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['unlock'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/logininfor/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取系统访问记录列表
     * @description 获取系统访问记录列表
     */
    get: operations['list_18'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/cache': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取缓存监控列表
     * @description 获取缓存监控列表
     */
    get: operations['getInfo_19'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/websocket/send': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 发布消息
     * @description 发布消息
     */
    get: operations['send_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/tree/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取测试树表详细信息
     * @description 获取测试树表详细信息
     */
    get: operations['getInfo_20'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/tree/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询测试树表列表
     * @description 查询测试树表列表
     */
    get: operations['list_19'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/tree/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 导出测试树表列表
     * @description 导出测试树表列表
     */
    get: operations['export_13'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/sms/sendTencent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 发送短信Tencent
     * @description 发送短信Tencent
     */
    get: operations['sendTencent'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/sms/sendAliyun': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 发送短信Aliyun
     * @description 发送短信Aliyun
     */
    get: operations['sendAliyun'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/sms/removeBlacklist': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 移除黑名单
     * @description 移除黑名单
     */
    get: operations['removeBlacklist'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/sms/addBlacklist': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 添加黑名单
     * @description 添加黑名单
     */
    get: operations['addBlacklist'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/sensitive/test': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试数据脱敏
     * @description 测试数据脱敏
     */
    get: operations['test'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/redisLock/testLock4j': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试lock4j 注解
     * @description 测试lock4j 注解
     */
    get: operations['testLock4j'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/redisLock/testLock4jLockTemplate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试lock4j 工具
     * @description 测试lock4j 工具
     */
    get: operations['testLock4jLockTemplate'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/redis/pubsub/sub': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 订阅消息
     * @description 订阅消息
     */
    get: operations['sub'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/redis/pubsub/pub': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 发布消息
     * @description 发布消息
     */
    get: operations['pub'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/rateLimiter/testip': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试请求IP限流
     *      同一IP请求受影响
     * @description 测试请求IP限流
     *      同一IP请求受影响
     */
    get: operations['testip'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/rateLimiter/testcluster': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试集群实例限流
     *      启动两个后端服务互不影响
     * @description 测试集群实例限流
     *      启动两个后端服务互不影响
     */
    get: operations['testcluster'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/rateLimiter/test': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试全局限流
     *      全局影响
     * @description 测试全局限流
     *      全局影响
     */
    get: operations['test_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/rateLimiter/testObj': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试请求IP限流(key基于参数获取)
     *      同一IP请求受影响
     *
     *      简单变量获取 #变量 复杂表达式 #{#变量 != 1 ? 1 : 0}
     * @description 测试请求IP限流(key基于参数获取)
     *      同一IP请求受影响
     *
     *      简单变量获取 #变量 复杂表达式 #{#变量 != 1 ? 1 : 0}
     */
    get: operations['testObj'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/priority/remove': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 删除队列数据
     * @description 删除队列数据
     */
    get: operations['remove_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/priority/get': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取队列数据
     * @description 获取队列数据
     */
    get: operations['get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/priority/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 添加队列数据
     * @description 添加队列数据
     */
    get: operations['add_17'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/delayed/subscribe': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 订阅队列
     * @description 订阅队列
     */
    get: operations['subscribe'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/delayed/remove': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 删除队列数据
     * @description 删除队列数据
     */
    get: operations['remove_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/delayed/destroy': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 销毁队列
     * @description 销毁队列
     */
    get: operations['destroy'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/delayed/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 添加队列数据
     * @description 添加队列数据
     */
    get: operations['add_18'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/bounded/remove': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 删除队列数据
     * @description 删除队列数据
     */
    get: operations['remove_3'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/bounded/get': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取队列数据
     * @description 获取队列数据
     */
    get: operations['get_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/queue/bounded/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 添加队列数据
     * @description 添加队列数据
     */
    get: operations['add_19'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/mail/sendSimpleMessage': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 发送邮件
     * @description 发送邮件
     */
    get: operations['sendSimpleMessage'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/mail/sendMessageWithAttachment': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 发送邮件（带附件）
     * @description 发送邮件（带附件）
     */
    get: operations['sendMessageWithAttachment'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/i18n': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 通过code获取国际化内容
     *      code为 messages
     * @description 通过code获取国际化内容
     *      code为 messages.properties 中的 key
     *      <p>
     *      测试使用 user.register.success
     */
    get: operations['get_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/i18n/test2': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Bean 校验国际化
     *      不传值 分别查看异常返回
     *
     * @description Bean 校验国际化
     *      不传值 分别查看异常返回
     *      <p>
     *      测试使用 not.null
     */
    get: operations['test2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/i18n/test1': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Validator 校验国际化
     *      不传值 分别查看异常返回
     *
     * @description Validator 校验国际化
     *      不传值 分别查看异常返回
     *      <p>
     *      测试使用 not.null
     */
    get: operations['test1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/excel/exportWithOptions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 导出下拉框
     * @description 导出下拉框
     */
    get: operations['exportWithOptions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/excel/exportTemplateOne': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 单列表多数据
     * @description 单列表多数据
     */
    get: operations['exportTemplateOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/excel/exportTemplateMultiSheet': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 多个sheet导出
     * @description 多个sheet导出
     */
    get: operations['exportTemplateMultiSheet'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/excel/exportTemplateMuliti': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 多列表多数据
     * @description 多列表多数据
     */
    get: operations['exportTemplateMuliti'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/encrypt': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试数据库加解密
     * @description 测试数据库加解密
     */
    get: operations['test_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/demo/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 获取测试单表详细信息
     * @description 获取测试单表详细信息
     */
    get: operations['getInfo_21'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/demo/page': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 自定义分页查询
     * @description 自定义分页查询
     */
    get: operations['page_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/demo/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 查询测试单表列表
     * @description 查询测试单表列表
     */
    get: operations['list_20'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/cache/test6': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试设置过期时间
     *      手动设置过期时间10秒
     *      11秒后获取 判断是否相等
     * @description 测试设置过期时间
     *      手动设置过期时间10秒
     *      11秒后获取 判断是否相等
     */
    get: operations['test6'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/cache/test3': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试 @CacheEvict
     *
     * @description 测试 @CacheEvict
     *      <p>
     *      使用了CacheEvict注解的方法,会清空指定缓存
     *      「一般用在删除的方法上」
     *      <p>
     *      cacheNames 命名规则 查看 {@link CacheNames CacheNames} 注释 支持多参数
     */
    get: operations['test3'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/cache/test2': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试 @CachePut
     *
     * @description 测试 @CachePut
     *      <p>
     *      加了@CachePut注解的方法,会把方法的返回值put到缓存里面缓存起来,供其它地方使用
     *      它「通常用在新增或者实时更新方法上」
     *      <p>
     *      cacheNames 命名规则 查看 {@link CacheNames CacheNames} 注释 支持多参数
     */
    get: operations['test2_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/cache/test1': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 测试 @Cacheable
     *
     * @description 测试 @Cacheable
     *      <p>
     *      表示这个方法有了缓存的功能,方法的返回值会被缓存下来
     *      下一次调用该方法前,会去检查是否缓存中已经有值
     *      如果有就直接返回,不调用方法
     *      如果没有,就调用方法,然后把结果缓存起来
     *      这个注解「一般用在查询方法上」
     *      <p>
     *      重点说明: 缓存注解严谨与其他筛选数据功能一起使用
     *      例如: 数据权限注解 会造成 缓存击穿 与 数据不一致问题
     *      <p>
     *      cacheNames 命名规则 查看 {@link CacheNames CacheNames} 注释 支持多参数
     */
    get: operations['test1_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/tenant/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 登录页面租户下拉框
     * @description 登录页面租户下拉框
     */
    get: operations['tenantList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/code': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 生成验证码
     * @description 生成验证码
     */
    get: operations['getCode'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/binding/{source}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 第三方登录请求
     * @description 第三方登录请求
     */
    get: operations['authBinding'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 访问首页，提示语
     * @description 访问首页，提示语
     */
    get: operations['index'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/deleteRunAndHisInstance/{businessKeys}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 运行中的实例 删除程实例，删除历史记录，删除业务与流程关联信息
     * @description 运行中的实例 删除程实例，删除历史记录，删除业务与流程关联信息
     */
    delete: operations['deleteRunAndHisInstance'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processInstance/deleteFinishAndHisInstance/{businessKeys}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 已完成的实例 删除程实例，删除历史记录，删除业务与流程关联信息
     * @description 已完成的实例 删除程实例，删除历史记录，删除业务与流程关联信息
     */
    delete: operations['deleteFinishAndHisInstance'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/processDefinition/{deploymentIds}/{processDefinitionIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除流程定义
     * @description 删除流程定义
     */
    delete: operations['deleteDeployment'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/model/{ids}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除流程模型
     * @description 删除流程模型
     */
    delete: operations['delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/leave/{ids}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除请假
     * @description 删除请假
     */
    delete: operations['remove_4'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/formManage/{ids}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除表单管理
     * @description 删除表单管理
     */
    delete: operations['remove_5'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/definitionConfig/{ids}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除流程定义配置
     * @description 删除流程定义配置
     */
    delete: operations['remove_6'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/workflow/category/{ids}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除流程分类
     * @description 删除流程分类
     */
    delete: operations['remove_7'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tool/gen/{tableIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除代码生成
     * @description 删除代码生成
     */
    delete: operations['remove_8'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/user/{userIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除用户
     * @description 删除用户
     */
    delete: operations['remove_9'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/role/{roleIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除角色
     * @description 删除角色
     */
    delete: operations['remove_10'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/post/{postIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除岗位
     * @description 删除岗位
     */
    delete: operations['remove_11'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/notice/{noticeIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除通知公告
     * @description 删除通知公告
     */
    delete: operations['remove_12'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/type/{dictIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除字典类型
     * @description 删除字典类型
     */
    delete: operations['remove_14'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/type/refreshCache': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 刷新字典缓存
     * @description 刷新字典缓存
     */
    delete: operations['refreshCache'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/dict/data/{dictCodes}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除字典类型
     * @description 删除字典类型
     */
    delete: operations['remove_15'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/config/{configIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除参数配置
     * @description 删除参数配置
     */
    delete: operations['remove_17'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/config/refreshCache': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 刷新参数缓存
     * @description 刷新参数缓存
     */
    delete: operations['refreshCache_1'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/system/client/{ids}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除客户端管理
     * @description 删除客户端管理
     */
    delete: operations['remove_18'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/{ossIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除OSS对象存储
     * @description 删除OSS对象存储
     */
    delete: operations['remove_19'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource/oss/config/{ossConfigIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除对象存储配置
     * @description 删除对象存储配置
     */
    delete: operations['remove_20'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/operlog/{operIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 批量删除操作日志记录
     * @description 批量删除操作日志记录
     */
    delete: operations['remove_21'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/operlog/clean': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 清理操作日志记录
     * @description 清理操作日志记录
     */
    delete: operations['clean'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/logininfor/{infoIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 批量删除登录日志
     * @description 批量删除登录日志
     */
    delete: operations['remove_22'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/monitor/logininfor/clean': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 清理系统访问记录
     * @description 清理系统访问记录
     */
    delete: operations['clean_1'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/tree/{ids}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除测试树表
     * @description 删除测试树表
     */
    delete: operations['remove_23'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/demo/{ids}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除测试单表
     * @description 删除测试单表
     */
    delete: operations['remove_24'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/demo/batch': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 删除批量方法
     * @description 删除批量方法
     */
    delete: operations['remove_25'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/unlock/{socialId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 取消授权
     * @description 取消授权
     */
    delete: operations['unlockSocial'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description 响应信息主体 */
    RVoid: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: Record<string, never>;
    };
    /** @description 模型请求对象 */
    ModelBo: {
      /** @description 模型id */
      id: string;
      /** @description 模型名称 */
      name: string;
      /** @description 模型标识key */
      key: string;
      /** @description 模型分类 */
      categoryCode: string;
      /** @description 模型XML */
      xml: string;
      /** @description 模型SVG图片 */
      svg: string;
      /** @description 备注 */
      description?: string;
    };
    /** @description 请假业务对象 test_leave */
    TestLeaveBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 主键
       */
      id: number;
      /** @description 请假类型 */
      leaveType: string;
      /**
       * Format: date-time
       * @description 开始时间
       */
      startDate: string;
      /**
       * Format: date-time
       * @description 结束时间
       */
      endDate: string;
      /**
       * Format: int32
       * @description 请假天数
       */
      leaveDays: number;
      /**
       * Format: int32
       * @description 开始时间
       */
      startLeaveDays?: number;
      /**
       * Format: int32
       * @description 结束时间
       */
      endLeaveDays?: number;
      /** @description 请假原因 */
      remark?: string;
      /** @description 状态 */
      status?: string;
    };
    /** @description 响应信息主体 */
    RTestLeaveVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['TestLeaveVo'];
    };
    /** @description 请假视图对象 test_leave */
    TestLeaveVo: {
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /** @description 请假类型 */
      leaveType?: string;
      /**
       * Format: date-time
       * @description 开始时间
       */
      startDate?: string;
      /**
       * Format: date-time
       * @description 结束时间
       */
      endDate?: string;
      /**
       * Format: int32
       * @description 请假天数
       */
      leaveDays?: number;
      /** @description 备注 */
      remark?: string;
      /** @description 状态 */
      status?: string;
    };
    /** @description 表单管理业务对象 wf_form_manage */
    WfFormManageBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 主键
       */
      id: number;
      /** @description 表单名称 */
      formName: string;
      /** @description 表单类型 */
      formType: string;
      /** @description 路由地址/表单ID */
      router: string;
      /** @description 备注 */
      remark?: string;
    };
    /** @description 流程分类业务对象 wf_category */
    WfCategoryBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 主键
       */
      id: number;
      /** @description 分类名称 */
      categoryName: string;
      /** @description 分类编码 */
      categoryCode: string;
      /**
       * Format: int64
       * @description 父级id
       */
      parentId: number;
      /**
       * Format: int64
       * @description 排序
       */
      sortNum?: number;
    };
    /** @description 业务表 gen_table */
    GenTable: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 编号
       */
      tableId?: number;
      /** @description 数据源名称 */
      dataName: string;
      /** @description 表名称 */
      tableName: string;
      /** @description 表描述 */
      tableComment: string;
      /** @description 关联父表的表名 */
      subTableName?: string;
      /** @description 本表关联父表的外键名 */
      subTableFkName?: string;
      /** @description 实体类名称(首字母大写) */
      className: string;
      /** @description 使用的模板（crud单表操作 tree树表操作 sub主子表操作） */
      tplCategory?: string;
      /** @description 生成包路径 */
      packageName: string;
      /** @description 生成模块名 */
      moduleName: string;
      /** @description 生成业务名 */
      businessName: string;
      /** @description 生成功能名 */
      functionName: string;
      /** @description 生成作者 */
      functionAuthor: string;
      /** @description 生成代码方式（0zip压缩包 1自定义路径） */
      genType?: string;
      /** @description 生成路径（不填默认项目路径） */
      genPath?: string;
      pkColumn?: components['schemas']['GenTableColumn'];
      /** @description 表列信息 */
      columns?: components['schemas']['GenTableColumn'][];
      /** @description 其它生成选项 */
      options?: string;
      /** @description 备注 */
      remark?: string;
      /** @description 树编码字段 */
      treeCode?: string;
      /** @description 树父编码字段 */
      treeParentCode?: string;
      /** @description 树名称字段 */
      treeName?: string;
      menuIds?: number[];
      /**
       * Format: int64
       * @description 上级菜单ID字段
       */
      parentMenuId?: number;
      /** @description 上级菜单名称字段 */
      parentMenuName?: string;
      tree?: boolean;
      crud?: boolean;
    };
    /** @description 代码生成业务字段表 gen_table_column */
    GenTableColumn: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 编号
       */
      columnId?: number;
      /**
       * Format: int64
       * @description 归属表编号
       */
      tableId?: number;
      /** @description 列名称 */
      columnName?: string;
      /** @description 列描述 */
      columnComment?: string;
      /** @description 列类型 */
      columnType?: string;
      /** @description JAVA类型 */
      javaType?: string;
      /** @description JAVA字段名 */
      javaField: string;
      /** @description 是否主键（1是） */
      isPk?: string;
      /** @description 是否自增（1是） */
      isIncrement?: string;
      /** @description 是否必填（1是） */
      isRequired?: string;
      /** @description 是否为插入字段（1是） */
      isInsert?: string;
      /** @description 是否编辑字段（1是） */
      isEdit?: string;
      /** @description 是否列表字段（1是） */
      isList?: string;
      /** @description 是否查询字段（1是） */
      isQuery?: string;
      /** @description 查询方式（EQ等于、NE不等于、GT大于、LT小于、LIKE模糊、BETWEEN范围） */
      queryType?: string;
      /** @description 显示类型（input文本框、textarea文本域、select下拉框、checkbox复选框、radio单选框、datetime日期控件、image图片上传控件、upload文件上传控件、editor富文本控件） */
      htmlType?: string;
      /** @description 字典类型 */
      dictType?: string;
      /**
       * Format: int32
       * @description 排序
       */
      sort?: number;
      required?: boolean;
      list?: boolean;
      usableColumn?: boolean;
      superColumn?: boolean;
      insert?: boolean;
      edit?: boolean;
      pk?: boolean;
      query?: boolean;
      capJavaField?: string;
      increment?: boolean;
    };
    /** @description 用户信息业务对象 sys_user */
    SysUserBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never> | string;
      };
      /**
       * Format: int64
       * @description 用户ID
       */
      userId?: number;
      /**
       * Format: int64
       * @description 部门ID
       */
      deptId?: number;
      /** @description 用户账号 */
      userName: string;
      /** @description 用户昵称 */
      nickName: string;
      /** @description 用户类型（sys_user系统用户） */
      userType?: string;
      /** @description 用户邮箱 */
      email?: string;
      /** @description 手机号码 */
      phonenumber?: string;
      /** @description 用户性别（0男 1女 2未知） */
      sex?: string;
      /** @description 密码 */
      password?: string;
      /** @description 帐号状态 */
      status?: string;
      /** @description 备注 */
      remark?: string;
      /** @description 角色组 */
      roleIds?: number[];
      /** @description 岗位组 */
      postIds?: number[];
      /**
       * Format: int64
       * @description 数据权限 当前角色ID
       */
      roleId?: number;
      /** @description 排除不查询的用户(工作流用) */
      excludeUserIds?: string;
      superAdmin?: boolean;
    };
    /** @description 个人信息业务处理 */
    SysUserProfileBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /** @description 用户昵称 */
      nickName?: string;
      /** @description 用户邮箱 */
      email?: string;
      /** @description 手机号码 */
      phonenumber?: string;
      /** @description 用户性别（0男 1女 2未知） */
      sex?: string;
    };
    /** @description 用户密码修改bo */
    SysUserPasswordBo: {
      /** @description 旧密码 */
      oldPassword: string;
      /** @description 新密码 */
      newPassword: string;
    };
    /** @description 角色信息业务对象 sys_role */
    SysRoleBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 角色ID
       */
      roleId?: number;
      /** @description 角色名称 */
      roleName: string;
      /** @description 角色权限字符串 */
      roleKey: string;
      /**
       * Format: int32
       * @description 显示顺序
       */
      roleSort: number;
      /** @description 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限） */
      dataScope?: string;
      /** @description 菜单树选择项是否关联显示 */
      menuCheckStrictly?: boolean;
      /** @description 部门树选择项是否关联显示 */
      deptCheckStrictly?: boolean;
      /** @description 角色状态 */
      status?: string;
      /** @description 备注 */
      remark?: string;
      /** @description 菜单组 */
      menuIds?: number[];
      /** @description 部门组（数据权限） */
      deptIds?: number[];
      superAdmin?: boolean;
    };
    /** @description 用户和角色关联 sys_user_role */
    SysUserRole: {
      /**
       * Format: int64
       * @description 用户ID
       */
      userId?: number;
      /**
       * Format: int64
       * @description 角色ID
       */
      roleId?: number;
    };
    /** @description 岗位信息业务对象 sys_post */
    SysPostBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 岗位ID
       */
      postId?: number;
      /**
       * Format: int64
       * @description 部门id（单部门）
       */
      deptId: number;
      /**
       * Format: int64
       * @description 归属部门id（部门树）
       */
      belongDeptId?: number;
      /** @description 岗位编码 */
      postCode: string;
      /** @description 岗位名称 */
      postName: string;
      /** @description 岗位类别编码 */
      postCategory?: string;
      /**
       * Format: int32
       * @description 显示顺序
       */
      postSort: number;
      /** @description 状态 */
      status?: string;
      /** @description 备注 */
      remark?: string;
    };
    /** @description 通知公告业务对象 sys_notice */
    SysNoticeBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 公告ID
       */
      noticeId?: number;
      /** @description 公告标题 */
      noticeTitle: string;
      /** @description 公告类型（1通知 2公告） */
      noticeType?: string;
      /** @description 公告内容 */
      noticeContent?: string;
      /** @description 公告状态（0正常 1关闭） */
      status?: string;
      /** @description 备注 */
      remark?: string;
      /** @description 创建人名称 */
      createByName?: string;
    };
    /** @description 菜单权限业务对象 sys_menu */
    SysMenuBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 菜单ID
       */
      menuId?: number;
      /**
       * Format: int64
       * @description 父菜单ID
       */
      parentId?: number;
      /** @description 菜单名称 */
      menuName: string;
      /**
       * Format: int32
       * @description 显示顺序
       */
      orderNum: number;
      /** @description 路由地址 */
      path?: string;
      /** @description 组件路径 */
      component?: string;
      /** @description 路由参数 */
      queryParam?: string;
      /** @description 是否为外链（0是 1否） */
      isFrame?: string;
      /** @description 是否缓存（0缓存 1不缓存） */
      isCache?: string;
      /** @description 菜单类型（M目录 C菜单 F按钮） */
      menuType: string;
      /** @description 显示状态（0显示 1隐藏） */
      visible?: string;
      /** @description 菜单状态 */
      status?: string;
      /** @description 权限标识 */
      perms?: string;
      /** @description 菜单图标 */
      icon?: string;
      /** @description 备注 */
      remark?: string;
    };
    /** @description 字典类型业务对象 sys_dict_type */
    SysDictTypeBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 字典主键
       */
      dictId?: number;
      /** @description 字典名称 */
      dictName: string;
      /** @description 字典类型 */
      dictType: string;
      /** @description 备注 */
      remark?: string;
    };
    /** @description 字典数据业务对象 sys_dict_data */
    SysDictDataBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 字典编码
       */
      dictCode?: number;
      /**
       * Format: int32
       * @description 字典排序
       */
      dictSort?: number;
      /** @description 字典标签 */
      dictLabel: string;
      /** @description 字典键值 */
      dictValue: string;
      /** @description 字典类型 */
      dictType: string;
      /** @description 样式属性（其他样式扩展） */
      cssClass?: string;
      /** @description 表格回显样式 */
      listClass?: string;
      /** @description 是否默认（Y是 N否） */
      isDefault?: string;
      /** @description 备注 */
      remark?: string;
    };
    /** @description 部门业务对象 sys_dept */
    SysDeptBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 部门id
       */
      deptId?: number;
      /**
       * Format: int64
       * @description 父部门ID
       */
      parentId?: number;
      /** @description 部门名称 */
      deptName: string;
      /** @description 部门类别编码 */
      deptCategory?: string;
      /**
       * Format: int32
       * @description 显示顺序
       */
      orderNum: number;
      /**
       * Format: int64
       * @description 负责人
       */
      leader?: number;
      /** @description 联系电话 */
      phone?: string;
      /** @description 邮箱 */
      email?: string;
      /** @description 部门状态 */
      status?: string;
    };
    /** @description 参数配置业务对象 sys_config */
    SysConfigBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 参数主键
       */
      configId?: number;
      /** @description 参数名称 */
      configName: string;
      /** @description 参数键名 */
      configKey: string;
      /** @description 参数键值 */
      configValue: string;
      /** @description 系统内置（Y是 N否） */
      configType?: string;
      /** @description 备注 */
      remark?: string;
    };
    /** @description 授权管理业务对象 sys_client */
    SysClientBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description id
       */
      id: number;
      /** @description 客户端id */
      clientId?: string;
      /** @description 客户端key */
      clientKey: string;
      /** @description 客户端秘钥 */
      clientSecret: string;
      /** @description 授权类型 */
      grantTypeList: string[];
      /** @description 授权类型 */
      grantType?: string;
      /** @description 设备类型 */
      deviceType?: string;
      /**
       * Format: int64
       * @description token活跃超时时间
       */
      activeTimeout?: number;
      /**
       * Format: int64
       * @description token固定超时时间
       */
      timeout?: number;
      /** @description 状态 */
      status?: string;
    };
    /** @description 对象存储配置业务对象 sys_oss_config */
    SysOssConfigBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 主键
       */
      ossConfigId: number;
      /** @description 配置key */
      configKey: string;
      /** @description accessKey */
      accessKey: string;
      /** @description 秘钥 */
      secretKey: string;
      /** @description 桶名称 */
      bucketName: string;
      /** @description 前缀 */
      prefix?: string;
      /** @description 访问站点 */
      endpoint: string;
      /** @description 自定义域名 */
      domain?: string;
      /** @description 是否https（Y=是,N=否） */
      isHttps?: string;
      /** @description 是否默认（0=是,1=否） */
      status?: string;
      /** @description 域 */
      region?: string;
      /** @description 扩展字段 */
      ext1?: string;
      /** @description 备注 */
      remark?: string;
      /** @description 桶权限类型(0private 1public 2custom) */
      accessPolicy: string;
    };
    /** @description 测试树表业务对象 test_tree */
    TestTreeBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 主键
       */
      id: number;
      /**
       * Format: int64
       * @description 父ID
       */
      parentId?: number;
      /**
       * Format: int64
       * @description 部门id
       */
      deptId: number;
      /**
       * Format: int64
       * @description 用户id
       */
      userId: number;
      /** @description 树节点名 */
      treeName: string;
    };
    /** @description 测试单表业务对象 test_demo */
    TestDemoBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 主键
       */
      id: number;
      /**
       * Format: int64
       * @description 部门id
       */
      deptId: number;
      /**
       * Format: int64
       * @description 用户id
       */
      userId: number;
      /**
       * Format: int32
       * @description 排序号
       */
      orderNum: number;
      /** @description key键 */
      testKey: string;
      /** @description 值 */
      value: string;
    };
    /** @description 终转办务请求对象 */
    TransmitBo: {
      /** @description 任务id */
      taskId: string;
      /** @description 转办人id */
      userId: string;
      /** @description 审批意见 */
      comment?: string;
    };
    /** @description 终止任务请求对象 */
    TerminationBo: {
      /** @description 任务id */
      taskId: string;
      /** @description 审批意见 */
      comment?: string;
    };
    /** @description 启动流程对象 */
    StartProcessBo: {
      /** @description 业务唯一值id */
      businessKey: string;
      /** @description 表名 */
      tableName: string;
      /** @description 流程变量，前端会提交一个元素{'entity': {业务详情数据对象}} */
      variables?: {
        [key: string]: Record<string, never>;
      };
    };
    /** @description 响应信息主体 */
    RMapStringObject: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: {
        [key: string]: Record<string, never>;
      };
    };
    /** @description 减签参数请求 */
    DeleteMultiBo: {
      /** @description 任务ID */
      taskId: string;
      /** @description 减签人员 */
      taskIds: string[];
      /** @description 执行id */
      executionIds: string[];
      /** @description 人员id */
      assigneeIds: number[];
      /** @description 人员名称 */
      assigneeNames: string[];
    };
    /** @description 委派任务请求对象 */
    DelegateBo: {
      /** @description 委派人id */
      userId: string;
      /** @description 委派人名称 */
      nickName: string;
      /** @description 任务id */
      taskId: string;
    };
    /** @description 办理任务请求对象 */
    CompleteTaskBo: {
      /** @description 任务id */
      taskId: string;
      /** @description 附件id */
      fileId?: string;
      /** @description 抄送人员 */
      wfCopyList?: components['schemas']['WfCopy'][];
      /** @description 消息类型 */
      messageType?: string[];
      /** @description 办理意见 */
      message?: string;
      /** @description 流程变量 */
      variables?: {
        [key: string]: Record<string, never>;
      };
    };
    /** @description 抄送 */
    WfCopy: {
      /**
       * Format: int64
       * @description 用户id
       */
      userId?: number;
      /** @description 用户名称 */
      userName?: string;
    };
    /** @description 驳回参数请求 */
    BackProcessBo: {
      /** @description 任务ID */
      taskId: string;
      /** @description 消息类型 */
      messageType?: string[];
      /** @description 驳回的节点id(目前未使用，直接驳回到申请人) */
      targetActivityId: string;
      /** @description 办理意见 */
      message?: string;
    };
    /** @description 响应信息主体 */
    RString: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: string;
    };
    /** @description 加签参数请求 */
    AddMultiBo: {
      /** @description 任务ID */
      taskId: string;
      /** @description 加签人员id */
      assignees: number[];
      /** @description 加签人员名称 */
      assigneeNames: string[];
    };
    /** @description 任务催办 */
    TaskUrgingBo: {
      /** @description 流程实例id */
      processInstanceId?: string;
      /** @description 消息类型 */
      messageType?: string[];
      /** @description 催办内容（为空默认系统内置信息） */
      message?: string;
    };
    /** @description 流程实例作废请求对象 */
    ProcessInvalidBo: {
      /** @description 业务id */
      businessKey: string;
      /** @description 作废原因 */
      deleteReason?: string;
    };
    /** @description 流程定义配置业务对象 wf_form_definition */
    WfDefinitionConfigBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description 主键
       */
      id: number;
      /** @description 表名 */
      tableName: string;
      /** @description 流程定义ID */
      definitionId: string;
      /** @description 流程KEY */
      processKey: string;
      /**
       * Format: int32
       * @description 流程版本
       */
      version: number;
      /** @description 备注 */
      remark?: string;
    };
    /** @description 用户头像信息 */
    AvatarVo: {
      /** @description 头像地址 */
      imgUrl?: string;
    };
    /** @description 响应信息主体 */
    RAvatarVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['AvatarVo'];
    };
    /** @description 响应信息主体 */
    RSysOssUploadVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysOssUploadVo'];
    };
    /** @description 上传对象信息 */
    SysOssUploadVo: {
      /** @description URL地址 */
      url?: string;
      /** @description 文件名 */
      fileName?: string;
      /** @description 对象存储主键 */
      ossId?: string;
    };
    /** @description 操作日志记录业务对象 sys_oper_log */
    SysOperLogBo: {
      /**
       * Format: int64
       * @description 日志主键
       */
      operId?: number;
      /** @description 租户编号 */
      tenantId?: string;
      /** @description 模块标题 */
      title?: string;
      /**
       * Format: int32
       * @description 业务类型（0其它 1新增 2修改 3删除）
       */
      businessType?: number;
      /** @description 业务类型数组 */
      businessTypes?: number[];
      /** @description 方法名称 */
      method?: string;
      /** @description 请求方式 */
      requestMethod?: string;
      /**
       * Format: int32
       * @description 操作类别（0其它 1后台用户 2手机端用户）
       */
      operatorType?: number;
      /** @description 操作人员 */
      operName?: string;
      /** @description 部门名称 */
      deptName?: string;
      /** @description 请求URL */
      operUrl?: string;
      /** @description 主机地址 */
      operIp?: string;
      /** @description 操作地点 */
      operLocation?: string;
      /** @description 请求参数 */
      operParam?: string;
      /** @description 返回参数 */
      jsonResult?: string;
      /**
       * Format: int32
       * @description 操作状态（0正常 1异常）
       */
      status?: number;
      /** @description 错误消息 */
      errorMsg?: string;
      /**
       * Format: date-time
       * @description 操作时间
       */
      operTime?: string;
      /**
       * Format: int64
       * @description 消耗时间
       */
      costTime?: number;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
    };
    /** @description 系统访问记录业务对象 sys_logininfor */
    SysLogininforBo: {
      /**
       * Format: int64
       * @description 访问ID
       */
      infoId?: number;
      /** @description 租户编号 */
      tenantId?: string;
      /** @description 用户账号 */
      userName?: string;
      /** @description 客户端 */
      clientKey?: string;
      /** @description 设备类型 */
      deviceType?: string;
      /** @description 登录IP地址 */
      ipaddr?: string;
      /** @description 登录地点 */
      loginLocation?: string;
      /** @description 浏览器类型 */
      browser?: string;
      /** @description 操作系统 */
      os?: string;
      /** @description 登录状态（0成功 1失败） */
      status?: string;
      /** @description 提示消息 */
      msg?: string;
      /**
       * Format: date-time
       * @description 访问时间
       */
      loginTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
    };
    /** @description 带有下拉选的Excel导出 */
    ExportDemoVo: {
      /** @description 用户昵称 */
      nickName: string;
      /** @description 用户类型
       *      </p>
       *      使用ExcelEnumFormat注解需要进行下拉选的部分 */
      userStatus: string;
      /** @description 性别
       *      <p>
       *      使用ExcelDictFormat注解需要进行下拉选的部分 */
      gender: string;
      /** @description 手机号 */
      phoneNumber: string;
      /** @description Email */
      email: string;
      /** @description 省
       *      <p>
       *      级联下拉，仅判断是否选了 */
      province: string;
      /**
       * Format: int32
       * @description 数据库中的省ID
       *      </p>
       *      处理完毕后再判断是否市正确的值
       */
      provinceId: number;
      /** @description 市
       *      <p>
       *      级联下拉 */
      city: string;
      /**
       * Format: int32
       * @description 数据库中的市ID
       */
      cityId: number;
      /** @description 县
       *      <p>
       *      级联下拉 */
      area: string;
      /**
       * Format: int32
       * @description 数据库中的县ID
       */
      areaId: number;
    };
    /** @description 三方登录对象 */
    SocialLoginBody: {
      /** @description 客户端id */
      clientId: string;
      /** @description 授权类型 */
      grantType: string;
      /** @description 租户ID */
      tenantId?: string;
      /** @description 验证码 */
      code?: string;
      /** @description 唯一标识 */
      uuid?: string;
      /** @description 第三方登录平台 */
      source: string;
      /** @description 第三方登录code */
      socialCode: string;
      /** @description 第三方登录socialState */
      socialState: string;
    };
    /** @description 用户注册对象 */
    RegisterBody: {
      /** @description 客户端id */
      clientId: string;
      /** @description 授权类型 */
      grantType: string;
      /** @description 租户ID */
      tenantId?: string;
      /** @description 验证码 */
      code?: string;
      /** @description 唯一标识 */
      uuid?: string;
      /** @description 用户名 */
      username: string;
      /** @description 用户密码 */
      password: string;
      userType?: string;
    };
    /** @description 登录验证信息 */
    LoginVo: {
      /** @description 令牌权限 */
      scope?: string;
      /** @description 用户 openid */
      openid?: string;
      /** @description 授权令牌 */
      access_token?: string;
      /** @description 刷新令牌 */
      refresh_token?: string;
      /**
       * Format: int64
       * @description 授权令牌 access_token 的有效期
       */
      expire_in?: number;
      /**
       * Format: int64
       * @description 刷新令牌 refresh_token 的有效期
       */
      refresh_expire_in?: number;
      /** @description 应用id */
      client_id?: string;
    };
    /** @description 响应信息主体 */
    RLoginVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['LoginVo'];
    };
    /** @description 响应信息主体 */
    RListWfTaskBackNode: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['WfTaskBackNode'][];
    };
    /** @description 节点驳回记录 wf_task_back_node */
    WfTaskBackNode: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /** @description 租户编号 */
      tenantId?: string;
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /** @description 实例id */
      instanceId?: string;
      /** @description 节点id */
      nodeId?: string;
      /** @description 节点名称 */
      nodeName?: string;
      /**
       * Format: int32
       * @description 排序
       */
      orderNo?: number;
      /** @description 节点类型 */
      taskType?: string;
      /** @description 办理人 */
      assignee?: string;
    };
    /** @description 参与者 */
    ParticipantVo: {
      /** @description 组id（角色id） */
      groupIds?: number[];
      /** @description 候选人id（用户id） 当组id不为空时，将组内人员查出放入candidate */
      candidate?: number[];
      /** @description 候选人名称（用户名称） 当组id不为空时，将组内人员查出放入candidateName */
      candidateName?: string[];
      /** @description 是否认领标识
       *      当为空时默认当前任务不需要认领
       *      当为true时当前任务说明为候选模式并且有人已经认领了任务可以归还，
       *      当为false时当前任务说明为候选模式该任务未认领， */
      claim?: boolean;
    };
    /** @description 响应信息主体 */
    RTaskVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['TaskVo'];
    };
    /** @description 任务视图 */
    TaskVo: {
      /** @description 任务id */
      id?: string;
      /** @description 任务名称 */
      name?: string;
      /** @description 描述 */
      description?: string;
      /**
       * Format: int32
       * @description 优先级
       */
      priority?: number;
      /** @description 负责此任务的人员的用户id */
      owner?: string;
      /**
       * Format: int64
       * @description 办理人id
       */
      assignee?: number;
      /** @description 办理人 */
      assigneeName?: string;
      /** @description 流程实例id */
      processInstanceId?: string;
      /** @description 执行id */
      executionId?: string;
      /** @description 无用 */
      taskDefinitionId?: string;
      /** @description 流程定义id */
      processDefinitionId?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: date-time
       * @description 已办任务-创建时间
       */
      startTime?: string;
      /**
       * Format: date-time
       * @description 结束时间
       */
      endTime?: string;
      /** @description 节点id */
      taskDefinitionKey?: string;
      /**
       * Format: date-time
       * @description 任务截止日期
       */
      dueDate?: string;
      /** @description 流程类别 */
      category?: string;
      /** @description 父级任务id */
      parentTaskId?: string;
      /** @description 租户id */
      tenantId?: string;
      /**
       * Format: date-time
       * @description 认领时间
       */
      claimTime?: string;
      /** @description 流程状态 */
      businessStatus?: string;
      /** @description 流程状态 */
      businessStatusName?: string;
      /** @description 流程定义名称 */
      processDefinitionName?: string;
      /** @description 流程定义key */
      processDefinitionKey?: string;
      /**
       * Format: int32
       * @description 流程定义版本
       */
      processDefinitionVersion?: number;
      participantVo?: components['schemas']['ParticipantVo'];
      /** @description 是否会签 */
      multiInstance?: boolean;
      /** @description 业务id */
      businessKey?: string;
      wfDefinitionConfigVo?: components['schemas']['WfDefinitionConfigVo'];
      wfNodeConfigVo?: components['schemas']['WfNodeConfigVo'];
    };
    /** @description 流程定义配置视图对象 wf_definition_config */
    WfDefinitionConfigVo: {
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /** @description 表名 */
      tableName?: string;
      /** @description 流程定义ID */
      definitionId?: string;
      /** @description 流程KEY */
      processKey?: string;
      /**
       * Format: int32
       * @description 流程版本
       */
      version?: number;
      /** @description 备注 */
      remark?: string;
      wfFormManageVo?: components['schemas']['WfFormManageVo'];
    };
    /** @description 表单管理视图对象 wf_form_manage */
    WfFormManageVo: {
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /** @description 表单名称 */
      formName?: string;
      /** @description 表单类型 */
      formType?: string;
      /** @description 表单类型名称 */
      formTypeName?: string;
      /** @description 路由地址/表单ID */
      router?: string;
      /** @description 备注 */
      remark?: string;
    };
    /** @description 节点配置视图对象 wf_node_config */
    WfNodeConfigVo: {
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /**
       * Format: int64
       * @description 表单id
       */
      formId?: number;
      /** @description 表单类型 */
      formType?: string;
      /** @description 节点名称 */
      nodeName?: string;
      /** @description 节点id */
      nodeId?: string;
      /** @description 流程定义id */
      definitionId?: string;
      /** @description 是否为申请人节点 （0是 1否） */
      applyUserTask?: string;
      wfFormManageVo?: components['schemas']['WfFormManageVo'];
    };
    /** @description 任务请求对象 */
    TaskBo: {
      /** @description 任务名称 */
      name?: string;
      /** @description 流程定义名称 */
      processDefinitionName?: string;
      /** @description 流程定义key */
      processDefinitionKey?: string;
    };
    /** @description 分页查询实体类 */
    PageQuery: {
      /**
       * Format: int32
       * @description 分页大小
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description 当前页数
       */
      pageNum?: number;
      /** @description 排序列 */
      orderByColumn?: string;
      /** @description 排序的方向desc或者asc */
      isAsc?: string;
      /** Format: int32 */
      firstNum?: number;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoTaskVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['TaskVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RListTaskVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['TaskVo'][];
    };
    /** @description 响应信息主体 */
    RListVariableVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['VariableVo'][];
    };
    /** @description 流程变量 */
    VariableVo: {
      /** @description 变量key */
      key?: string;
      /** @description 变量值 */
      value?: string;
    };
    /** @description 流程实例请求对象 */
    ProcessInstanceBo: {
      /** @description 流程名称 */
      name?: string;
      /** @description 流程key */
      key?: string;
      /** @description 任务发起人 */
      startUserId?: string;
      /** @description 业务id */
      businessKey?: string;
      /** @description 模型分类 */
      categoryCode?: string;
    };
    /** @description 流程实例视图 */
    ProcessInstanceVo: {
      /** @description 流程实例id */
      id?: string;
      /** @description 流程定义id */
      processDefinitionId?: string;
      /** @description 流程定义名称 */
      processDefinitionName?: string;
      /** @description 流程定义key */
      processDefinitionKey?: string;
      /**
       * Format: int32
       * @description 流程定义版本
       */
      processDefinitionVersion?: number;
      /** @description 部署id */
      deploymentId?: string;
      /** @description 业务id */
      businessKey?: string;
      /** @description 是否挂起 */
      isSuspended?: boolean;
      /** @description 租户id */
      tenantId?: string;
      /**
       * Format: date-time
       * @description 启动时间
       */
      startTime?: string;
      /**
       * Format: date-time
       * @description 结束时间
       */
      endTime?: string;
      /** @description 启动人id */
      startUserId?: string;
      /** @description 流程状态 */
      businessStatus?: string;
      /** @description 流程状态 */
      businessStatusName?: string;
      /** @description 待办任务集合 */
      taskVoList?: components['schemas']['TaskVo'][];
      wfNodeConfigVo?: components['schemas']['WfNodeConfigVo'];
    };
    /** @description 表格分页数据对象 */
    TableDataInfoProcessInstanceVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['ProcessInstanceVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 流程审批记录视图 */
    ActHistoryInfoVo: {
      /** @description 任务id */
      id?: string;
      /** @description 节点id */
      taskDefinitionKey?: string;
      /** @description 任务名称 */
      name?: string;
      /** @description 流程实例id */
      processInstanceId?: string;
      /**
       * Format: int32
       * @description 版本
       */
      version?: number;
      /**
       * Format: date-time
       * @description 开始时间
       */
      startTime?: string;
      /**
       * Format: date-time
       * @description 结束时间
       */
      endTime?: string;
      /** @description 运行时长 */
      runDuration?: string;
      /** @description 状态 */
      status?: string;
      /** @description 状态 */
      statusName?: string;
      /** @description 办理人id */
      assignee?: string;
      /** @description 办理人名称 */
      nickName?: string;
      /** @description 办理人id */
      owner?: string;
      /** @description 审批信息id */
      commentId?: string;
      /** @description 审批信息 */
      comment?: string;
      /** @description 审批附件 */
      attachmentList?: components['schemas']['Attachment'][];
    };
    Attachment: {
      description?: string;
      name?: string;
      id?: string;
      type?: string;
      /** Format: date-time */
      time?: string;
      url?: string;
      userId?: string;
      taskId?: string;
      processInstanceId?: string;
      contentId?: string;
    };
    /** @description 响应信息主体 */
    RListActHistoryInfoVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['ActHistoryInfoVo'][];
    };
    /** @description 流程定义请求对象 */
    ProcessDefinitionBo: {
      /** @description 流程定义名称key */
      key?: string;
      /** @description 流程定义名称 */
      name?: string;
      /** @description 模型分类 */
      categoryCode?: string;
    };
    /** @description 流程定义视图 */
    ProcessDefinitionVo: {
      /** @description 流程定义id */
      id?: string;
      /** @description 流程定义名称 */
      name?: string;
      /** @description 流程定义标识key */
      key?: string;
      /**
       * Format: int32
       * @description 流程定义版本
       */
      version?: number;
      /**
       * Format: int32
       * @description 流程定义挂起或激活 1激活 2挂起
       */
      suspensionState?: number;
      /** @description 流程xml名称 */
      resourceName?: string;
      /** @description 流程图片名称 */
      diagramResourceName?: string;
      /** @description 流程部署id */
      deploymentId?: string;
      /**
       * Format: date-time
       * @description 流程部署时间
       */
      deploymentTime?: string;
      wfDefinitionConfigVo?: components['schemas']['WfDefinitionConfigVo'];
    };
    /** @description 表格分页数据对象 */
    TableDataInfoProcessDefinitionVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['ProcessDefinitionVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RListProcessDefinitionVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['ProcessDefinitionVo'][];
    };
    Model: {
      name?: string;
      key?: string;
      id?: string;
      /** Format: int32 */
      version?: number;
      category?: string;
      tenantId?: string;
      /** Format: date-time */
      createTime?: string;
      metaInfo?: string;
      deploymentId?: string;
      /** Format: date-time */
      lastUpdateTime?: string;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoModel: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['Model'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 模型视图对象 */
    ModelVo: {
      /** @description 模型id */
      id?: string;
      /** @description 模型名称 */
      name?: string;
      /** @description 模型标识key */
      key?: string;
      /** @description 模型分类 */
      categoryCode?: string;
      /** @description 模型XML */
      xml?: string;
      /** @description 备注 */
      description?: string;
    };
    /** @description 响应信息主体 */
    RModelVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['ModelVo'];
    };
    /** @description 表格分页数据对象 */
    TableDataInfoTestLeaveVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['TestLeaveVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RWfFormManageVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['WfFormManageVo'];
    };
    /** @description 表格分页数据对象 */
    TableDataInfoWfFormManageVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['WfFormManageVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RListWfFormManageVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['WfFormManageVo'][];
    };
    /** @description 响应信息主体 */
    RListWfDefinitionConfigVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['WfDefinitionConfigVo'][];
    };
    /** @description 响应信息主体 */
    RWfDefinitionConfigVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['WfDefinitionConfigVo'];
    };
    /** @description 响应信息主体 */
    RWfCategoryVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['WfCategoryVo'];
    };
    /** @description 流程分类视图对象 wf_category */
    WfCategoryVo: {
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /** @description 分类名称 */
      categoryName?: string;
      /** @description 分类编码 */
      categoryCode?: string;
      /**
       * Format: int64
       * @description 父级id
       */
      parentId?: number;
      /**
       * Format: int64
       * @description 排序
       */
      sortNum?: number;
    };
    /** @description 响应信息主体 */
    RListWfCategoryVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['WfCategoryVo'][];
    };
    /** @description 响应信息主体 */
    RMapStringString: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: {
        [key: string]: string;
      };
    };
    /** @description 表格分页数据对象 */
    TableDataInfoGenTable: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['GenTable'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RObject: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: Record<string, never>;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoGenTableColumn: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['GenTableColumn'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 用户个人信息 */
    ProfileVo: {
      user?: components['schemas']['SysUserVo'];
      /** @description 用户所属角色组 */
      roleGroup?: string;
      /** @description 用户所属岗位组 */
      postGroup?: string;
    };
    /** @description 响应信息主体 */
    RProfileVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['ProfileVo'];
    };
    /** @description 角色信息视图对象 sys_role */
    SysRoleVo: {
      /**
       * Format: int64
       * @description 角色ID
       */
      roleId?: number;
      /** @description 角色名称 */
      roleName?: string;
      /** @description 角色权限字符串 */
      roleKey?: string;
      /**
       * Format: int32
       * @description 显示顺序
       */
      roleSort?: number;
      /** @description 数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限） */
      dataScope?: string;
      /** @description 菜单树选择项是否关联显示 */
      menuCheckStrictly?: boolean;
      /** @description 部门树选择项是否关联显示 */
      deptCheckStrictly?: boolean;
      /** @description 角色状态 */
      status?: string;
      /** @description 备注 */
      remark?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /** @description 用户是否存在此角色标识 默认不存在 */
      flag?: boolean;
      superAdmin?: boolean;
    };
    /** @description 用户信息视图对象 sys_user */
    SysUserVo: {
      /**
       * Format: int64
       * @description 用户ID
       */
      userId?: number;
      /** @description 租户ID */
      tenantId?: string;
      /**
       * Format: int64
       * @description 部门ID
       */
      deptId?: number;
      /** @description 用户账号 */
      userName?: string;
      /** @description 用户昵称 */
      nickName?: string;
      /** @description 用户类型（sys_user系统用户） */
      userType?: string;
      /** @description 用户邮箱 */
      email?: string;
      /** @description 手机号码 */
      phonenumber?: string;
      /** @description 用户性别（0男 1女 2未知） */
      sex?: string;
      /**
       * Format: int64
       * @description 头像地址
       */
      avatar?: number;
      /** @description 帐号状态 */
      status?: string;
      /** @description 最后登录IP */
      loginIp?: string;
      /**
       * Format: date-time
       * @description 最后登录时间
       */
      loginDate?: string;
      /** @description 备注 */
      remark?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /** @description 部门名 */
      deptName?: string;
      /** @description 角色对象 */
      roles?: components['schemas']['SysRoleVo'][];
      /** @description 角色组 */
      roleIds?: number[];
      /** @description 岗位组 */
      postIds?: number[];
      /**
       * Format: int64
       * @description 数据权限 当前角色ID
       */
      roleId?: number;
    };
    /** @description 响应信息主体 */
    RListSysUserVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysUserVo'][];
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysUserVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysUserVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RUserInfoVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['UserInfoVo'];
    };
    /** @description 登录用户信息 */
    UserInfoVo: {
      user?: components['schemas']['SysUserVo'];
      /** @description 菜单权限 */
      permissions?: string[];
      /** @description 角色权限 */
      roles?: string[];
    };
    /** @description 响应信息主体 */
    RListTreeLong: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['TreeLong'][];
    };
    TreeLong: {
      name?: {
        empty?: boolean;
      };
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      parentId?: number;
      config?: components['schemas']['TreeNodeConfig'];
      weight?: Record<string, never>;
      empty?: boolean;
    } & {
      [key: string]: Record<string, never>;
    };
    TreeNodeConfig: {
      idKey?: string;
      parentIdKey?: string;
      weightKey?: string;
      nameKey?: string;
      childrenKey?: string;
      /** Format: int32 */
      deep?: number;
    };
    /** @description 响应信息主体 */
    RSysUserInfoVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysUserInfoVo'];
    };
    /** @description 岗位信息视图对象 sys_post */
    SysPostVo: {
      /**
       * Format: int64
       * @description 岗位ID
       */
      postId?: number;
      /**
       * Format: int64
       * @description 部门id
       */
      deptId?: number;
      /** @description 岗位编码 */
      postCode?: string;
      /** @description 岗位名称 */
      postName?: string;
      /** @description 岗位类别编码 */
      postCategory?: string;
      /**
       * Format: int32
       * @description 显示顺序
       */
      postSort?: number;
      /** @description 状态 */
      status?: string;
      /** @description 备注 */
      remark?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /** @description 部门名 */
      deptName?: string;
    };
    /** @description 用户信息 */
    SysUserInfoVo: {
      user?: components['schemas']['SysUserVo'];
      /** @description 角色ID列表 */
      roleIds?: number[];
      /** @description 角色列表 */
      roles?: components['schemas']['SysRoleVo'][];
      /** @description 岗位ID列表 */
      postIds?: number[];
      /** @description 岗位列表 */
      posts?: components['schemas']['SysPostVo'][];
    };
    /** @description 响应信息主体 */
    RListSysSocialVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysSocialVo'][];
    };
    /** @description 社会化关系视图对象 sys_social */
    SysSocialVo: {
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /**
       * Format: int64
       * @description 用户ID
       */
      userId?: number;
      /** @description 租户ID */
      tenantId?: string;
      /** @description 的唯一ID */
      authId?: string;
      /** @description 用户来源 */
      source?: string;
      /** @description 用户的授权令牌 */
      accessToken?: string;
      /**
       * Format: int32
       * @description 用户的授权令牌的有效期，部分平台可能没有
       */
      expireIn?: number;
      /** @description 刷新令牌，部分平台可能没有 */
      refreshToken?: string;
      /** @description 用户的 open id */
      openId?: string;
      /** @description 授权的第三方账号 */
      userName?: string;
      /** @description 授权的第三方昵称 */
      nickName?: string;
      /** @description 授权的第三方邮箱 */
      email?: string;
      /** @description 授权的第三方头像地址 */
      avatar?: string;
      /** @description 平台的授权信息，部分平台可能没有 */
      accessCode?: string;
      /** @description 用户的 unionid */
      unionId?: string;
      /** @description 授予的权限，部分平台可能没有 */
      scope?: string;
      /** @description 个别平台的授权信息，部分平台可能没有 */
      tokenType?: string;
      /** @description id token，部分平台可能没有 */
      idToken?: string;
      /** @description 小米平台用户的附带属性，部分平台可能没有 */
      macAlgorithm?: string;
      /** @description 小米平台用户的附带属性，部分平台可能没有 */
      macKey?: string;
      /** @description 用户的授权code，部分平台可能没有 */
      code?: string;
      /** @description Twitter平台用户的附带属性，部分平台可能没有 */
      oauthToken?: string;
      /** @description Twitter平台用户的附带属性，部分平台可能没有 */
      oauthTokenSecret?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
    };
    /** @description 响应信息主体 */
    RSysRoleVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysRoleVo'];
    };
    /** @description 响应信息主体 */
    RListSysRoleVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysRoleVo'][];
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysRoleVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysRoleVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 角色部门列表树信息 */
    DeptTreeSelectVo: {
      /** @description 选中部门列表 */
      checkedKeys?: number[];
      /** @description 下拉树结构列表 */
      depts?: components['schemas']['TreeLong'][];
    };
    /** @description 响应信息主体 */
    RDeptTreeSelectVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['DeptTreeSelectVo'];
    };
    /** @description 响应信息主体 */
    RSysPostVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysPostVo'];
    };
    /** @description 响应信息主体 */
    RListSysPostVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysPostVo'][];
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysPostVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysPostVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RSysNoticeVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysNoticeVo'];
    };
    /** @description 通知公告视图对象 sys_notice */
    SysNoticeVo: {
      /**
       * Format: int64
       * @description 公告ID
       */
      noticeId?: number;
      /** @description 公告标题 */
      noticeTitle?: string;
      /** @description 公告类型（1通知 2公告） */
      noticeType?: string;
      /** @description 公告内容 */
      noticeContent?: string;
      /** @description 公告状态（0正常 1关闭） */
      status?: string;
      /** @description 备注 */
      remark?: string;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /** @description 创建人名称 */
      createByName?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysNoticeVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysNoticeVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RSysMenuVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysMenuVo'];
    };
    /** @description 菜单权限视图对象 sys_menu */
    SysMenuVo: {
      /**
       * Format: int64
       * @description 菜单ID
       */
      menuId?: number;
      /** @description 菜单名称 */
      menuName?: string;
      /**
       * Format: int64
       * @description 父菜单ID
       */
      parentId?: number;
      /**
       * Format: int32
       * @description 显示顺序
       */
      orderNum?: number;
      /** @description 路由地址 */
      path?: string;
      /** @description 组件路径 */
      component?: string;
      /** @description 路由参数 */
      queryParam?: string;
      /** @description 是否为外链（0是 1否） */
      isFrame?: string;
      /** @description 是否缓存（0缓存 1不缓存） */
      isCache?: string;
      /** @description 菜单类型（M目录 C菜单 F按钮） */
      menuType?: string;
      /** @description 显示状态（0显示 1隐藏） */
      visible?: string;
      /** @description 菜单状态 */
      status?: string;
      /** @description 权限标识 */
      perms?: string;
      /** @description 菜单图标 */
      icon?: string;
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /** @description 备注 */
      remark?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /** @description 子菜单 */
      children?: components['schemas']['SysMenuVo'][];
    };
    /** @description 角色菜单列表树信息 */
    MenuTreeSelectVo: {
      /** @description 选中菜单列表 */
      checkedKeys?: number[];
      /** @description 菜单下拉树结构列表 */
      menus?: components['schemas']['TreeLong'][];
    };
    /** @description 响应信息主体 */
    RMenuTreeSelectVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['MenuTreeSelectVo'];
    };
    /** @description 响应信息主体 */
    RListSysMenuVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysMenuVo'][];
    };
    /** @description 路由显示信息 */
    MetaVo: {
      /** @description 设置该路由在侧边栏和面包屑中展示的名字 */
      title?: string;
      /** @description 设置该路由的图标，对应路径src/assets/icons/svg */
      icon?: string;
      /** @description 设置为true，则不会被 <keep-alive>缓存 */
      noCache?: boolean;
      /** @description 内链地址（http(s)://开头） */
      link?: string;
    };
    /** @description 响应信息主体 */
    RListRouterVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['RouterVo'][];
    };
    /** @description 路由配置信息 */
    RouterVo: {
      /** @description 路由名字 */
      name?: string;
      /** @description 路由地址 */
      path?: string;
      /** @description 是否隐藏路由，当设置 true 的时候该路由不会再侧边栏出现 */
      hidden?: boolean;
      /** @description 重定向地址，当设置 noRedirect 的时候该路由在面包屑导航中不可被点击 */
      redirect?: string;
      /** @description 组件地址 */
      component?: string;
      /** @description 路由参数：如 {"id": 1, "name": "ry"} */
      query?: string;
      /** @description 当你一个路由下面的 children 声明的路由大于1个时，自动会变成嵌套的模式--如组件页面 */
      alwaysShow?: boolean;
      meta?: components['schemas']['MetaVo'];
    };
    /** @description 响应信息主体 */
    RSysDictTypeVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysDictTypeVo'];
    };
    /** @description 字典类型视图对象 sys_dict_type */
    SysDictTypeVo: {
      /**
       * Format: int64
       * @description 字典主键
       */
      dictId?: number;
      /** @description 字典名称 */
      dictName?: string;
      /** @description 字典类型 */
      dictType?: string;
      /** @description 备注 */
      remark?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
    };
    /** @description 响应信息主体 */
    RListSysDictTypeVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysDictTypeVo'][];
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysDictTypeVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysDictTypeVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RSysDictDataVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysDictDataVo'];
    };
    /** @description 字典数据视图对象 sys_dict_data */
    SysDictDataVo: {
      /**
       * Format: int64
       * @description 字典编码
       */
      dictCode?: number;
      /**
       * Format: int32
       * @description 字典排序
       */
      dictSort?: number;
      /** @description 字典标签 */
      dictLabel?: string;
      /** @description 字典键值 */
      dictValue?: string;
      /** @description 字典类型 */
      dictType?: string;
      /** @description 样式属性（其他样式扩展） */
      cssClass?: string;
      /** @description 表格回显样式 */
      listClass?: string;
      /** @description 是否默认（Y是 N否） */
      isDefault?: string;
      /** @description 备注 */
      remark?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
    };
    /** @description 响应信息主体 */
    RListSysDictDataVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysDictDataVo'][];
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysDictDataVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysDictDataVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RSysDeptVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysDeptVo'];
    };
    /** @description 部门视图对象 sys_dept */
    SysDeptVo: {
      /**
       * Format: int64
       * @description 部门id
       */
      deptId?: number;
      /**
       * Format: int64
       * @description 父部门id
       */
      parentId?: number;
      /** @description 父部门名称 */
      parentName?: string;
      /** @description 祖级列表 */
      ancestors?: string;
      /** @description 部门名称 */
      deptName?: string;
      /** @description 部门类别编码 */
      deptCategory?: string;
      /**
       * Format: int32
       * @description 显示顺序
       */
      orderNum?: number;
      /**
       * Format: int64
       * @description 负责人ID
       */
      leader?: number;
      /** @description 负责人 */
      leaderName?: string;
      /** @description 联系电话 */
      phone?: string;
      /** @description 邮箱 */
      email?: string;
      /** @description 部门状态 */
      status?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
    };
    /** @description 响应信息主体 */
    RListSysDeptVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysDeptVo'][];
    };
    /** @description 响应信息主体 */
    RSysConfigVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysConfigVo'];
    };
    /** @description 参数配置视图对象 sys_config */
    SysConfigVo: {
      /**
       * Format: int64
       * @description 参数主键
       */
      configId?: number;
      /** @description 参数名称 */
      configName?: string;
      /** @description 参数键名 */
      configKey?: string;
      /** @description 参数键值 */
      configValue?: string;
      /** @description 系统内置（Y是 N否） */
      configType?: string;
      /** @description 备注 */
      remark?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysConfigVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysConfigVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RSysClientVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysClientVo'];
    };
    /** @description 授权管理视图对象 sys_client */
    SysClientVo: {
      /**
       * Format: int64
       * @description id
       */
      id?: number;
      /** @description 客户端id */
      clientId?: string;
      /** @description 客户端key */
      clientKey?: string;
      /** @description 客户端秘钥 */
      clientSecret?: string;
      /** @description 授权类型 */
      grantTypeList?: string[];
      /** @description 授权类型 */
      grantType?: string;
      /** @description 设备类型 */
      deviceType?: string;
      /**
       * Format: int64
       * @description token活跃超时时间
       */
      activeTimeout?: number;
      /**
       * Format: int64
       * @description token固定超时时间
       */
      timeout?: number;
      /** @description 状态 */
      status?: string;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysClientVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysClientVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    SseEmitter: {
      /** Format: int64 */
      timeout?: number;
    };
    /** @description OSS对象存储分页查询对象 sys_oss */
    SysOssBo: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /**
       * Format: int64
       * @description ossId
       */
      ossId?: number;
      /** @description 文件名 */
      fileName?: string;
      /** @description 原名 */
      originalName?: string;
      /** @description 文件后缀名 */
      fileSuffix?: string;
      /** @description URL地址 */
      url?: string;
      /** @description 服务商 */
      service?: string;
    };
    /** @description OSS对象存储视图对象 sys_oss */
    SysOssVo: {
      /**
       * Format: int64
       * @description 对象存储主键
       */
      ossId?: number;
      /** @description 文件名 */
      fileName?: string;
      /** @description 原名 */
      originalName?: string;
      /** @description 文件后缀名 */
      fileSuffix?: string;
      /** @description URL地址 */
      url?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 上传人
       */
      createBy?: number;
      /** @description 上传人名称 */
      createByName?: string;
      /** @description 服务商 */
      service?: string;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysOssVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysOssVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RListSysOssVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysOssVo'][];
    };
    /** @description 响应信息主体 */
    RSysOssConfigVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['SysOssConfigVo'];
    };
    /** @description 对象存储配置视图对象 sys_oss_config */
    SysOssConfigVo: {
      /**
       * Format: int64
       * @description 主键
       */
      ossConfigId?: number;
      /** @description 配置key */
      configKey?: string;
      /** @description accessKey */
      accessKey?: string;
      /** @description 秘钥 */
      secretKey?: string;
      /** @description 桶名称 */
      bucketName?: string;
      /** @description 前缀 */
      prefix?: string;
      /** @description 访问站点 */
      endpoint?: string;
      /** @description 自定义域名 */
      domain?: string;
      /** @description 是否https（Y=是,N=否） */
      isHttps?: string;
      /** @description 域 */
      region?: string;
      /** @description 是否默认（0=是,1=否） */
      status?: string;
      /** @description 扩展字段 */
      ext1?: string;
      /** @description 备注 */
      remark?: string;
      /** @description 桶权限类型(0private 1public 2custom) */
      accessPolicy?: string;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysOssConfigVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysOssConfigVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 操作日志记录视图对象 sys_oper_log */
    SysOperLogVo: {
      /**
       * Format: int64
       * @description 日志主键
       */
      operId?: number;
      /** @description 租户编号 */
      tenantId?: string;
      /** @description 模块标题 */
      title?: string;
      /**
       * Format: int32
       * @description 业务类型（0其它 1新增 2修改 3删除）
       */
      businessType?: number;
      /** @description 业务类型数组 */
      businessTypes?: number[];
      /** @description 方法名称 */
      method?: string;
      /** @description 请求方式 */
      requestMethod?: string;
      /**
       * Format: int32
       * @description 操作类别（0其它 1后台用户 2手机端用户）
       */
      operatorType?: number;
      /** @description 操作人员 */
      operName?: string;
      /** @description 部门名称 */
      deptName?: string;
      /** @description 请求URL */
      operUrl?: string;
      /** @description 主机地址 */
      operIp?: string;
      /** @description 操作地点 */
      operLocation?: string;
      /** @description 请求参数 */
      operParam?: string;
      /** @description 返回参数 */
      jsonResult?: string;
      /**
       * Format: int32
       * @description 操作状态（0正常 1异常）
       */
      status?: number;
      /** @description 错误消息 */
      errorMsg?: string;
      /**
       * Format: date-time
       * @description 操作时间
       */
      operTime?: string;
      /**
       * Format: int64
       * @description 消耗时间
       */
      costTime?: number;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysOperLogVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysOperLogVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 当前在线会话 */
    SysUserOnline: {
      /** @description 会话编号 */
      tokenId?: string;
      /** @description 部门名称 */
      deptName?: string;
      /** @description 用户名称 */
      userName?: string;
      /** @description 客户端 */
      clientKey?: string;
      /** @description 设备类型 */
      deviceType?: string;
      /** @description 登录IP地址 */
      ipaddr?: string;
      /** @description 登录地址 */
      loginLocation?: string;
      /** @description 浏览器类型 */
      browser?: string;
      /** @description 操作系统 */
      os?: string;
      /**
       * Format: int64
       * @description 登录时间
       */
      loginTime?: number;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysUserOnline: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysUserOnline'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 系统访问记录视图对象 sys_logininfor */
    SysLogininforVo: {
      /**
       * Format: int64
       * @description 访问ID
       */
      infoId?: number;
      /** @description 租户编号 */
      tenantId?: string;
      /** @description 用户账号 */
      userName?: string;
      /** @description 客户端 */
      clientKey?: string;
      /** @description 设备类型 */
      deviceType?: string;
      /** @description 登录状态（0成功 1失败） */
      status?: string;
      /** @description 登录IP地址 */
      ipaddr?: string;
      /** @description 登录地点 */
      loginLocation?: string;
      /** @description 浏览器类型 */
      browser?: string;
      /** @description 操作系统 */
      os?: string;
      /** @description 提示消息 */
      msg?: string;
      /**
       * Format: date-time
       * @description 访问时间
       */
      loginTime?: string;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoSysLogininforVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['SysLogininforVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 缓存监控列表信息 */
    CacheListInfoVo: {
      info?: {
        [key: string]: string;
      };
      /** Format: int64 */
      dbSize?: number;
      commandStats?: {
        [key: string]: string;
      }[];
    };
    /** @description 响应信息主体 */
    RCacheListInfoVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['CacheListInfoVo'];
    };
    /** @description 消息的dto */
    WebSocketMessageDto: {
      /** @description 需要推送到的session key 列表 */
      sessionKeys?: number[];
      /** @description 需要发送的消息 */
      message?: string;
    };
    /** @description 响应信息主体 */
    RTestTreeVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['TestTreeVo'];
    };
    /** @description 测试树表视图对象 test_tree */
    TestTreeVo: {
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /**
       * Format: int64
       * @description 父id
       */
      parentId?: number;
      /**
       * Format: int64
       * @description 部门id
       */
      deptId?: number;
      /**
       * Format: int64
       * @description 用户id
       */
      userId?: number;
      /** @description 树节点名 */
      treeName?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
    };
    /** @description 响应信息主体 */
    RListTestTreeVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['TestTreeVo'][];
    };
    /** @description 响应信息主体 */
    RTestSensitive: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['TestSensitive'];
    };
    TestSensitive: {
      /** @description 身份证 */
      idCard?: string;
      /** @description 电话 */
      phone?: string;
      /** @description 地址 */
      address?: string;
      /** @description 邮箱 */
      email?: string;
      /** @description 银行卡 */
      bankCard?: string;
    };
    TestI18nBo: {
      name: string;
      /** Format: int32 */
      age: number;
    };
    /** @description 响应信息主体 */
    RTestI18nBo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['TestI18nBo'];
    };
    /** @description 响应信息主体 */
    RMapStringTestDemoEncrypt: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: {
        [key: string]: components['schemas']['TestDemoEncrypt'];
      };
    };
    TestDemoEncrypt: {
      /**
       * Format: int64
       * @description 创建部门
       */
      createDept?: number;
      /**
       * Format: int64
       * @description 创建者
       */
      createBy?: number;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 更新者
       */
      updateBy?: number;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /** @description 请求参数 */
      params?: {
        [key: string]: Record<string, never>;
      };
      /** @description 租户编号 */
      tenantId?: string;
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /**
       * Format: int64
       * @description 部门id
       */
      deptId?: number;
      /**
       * Format: int64
       * @description 用户id
       */
      userId?: number;
      /**
       * Format: int32
       * @description 排序号
       */
      orderNum?: number;
      /** @description key键 */
      testKey?: string;
      /** @description 值 */
      value?: string;
      /**
       * Format: int64
       * @description 版本
       */
      version?: number;
      /**
       * Format: int64
       * @description 删除标志
       */
      delFlag?: number;
    };
    /** @description 响应信息主体 */
    RTestDemoVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['TestDemoVo'];
    };
    /** @description 测试单表视图对象 test_demo */
    TestDemoVo: {
      /**
       * Format: int64
       * @description 主键
       */
      id?: number;
      /**
       * Format: int64
       * @description 部门id
       */
      deptId?: number;
      /**
       * Format: int64
       * @description 用户id
       */
      userId?: number;
      /**
       * Format: int32
       * @description 排序号
       */
      orderNum?: number;
      /** @description key键 */
      testKey?: string;
      /** @description 值 */
      value?: string;
      /**
       * Format: date-time
       * @description 创建时间
       */
      createTime?: string;
      /**
       * Format: int64
       * @description 创建人
       */
      createBy?: number;
      /** @description 创建人账号 */
      createByName?: string;
      /**
       * Format: date-time
       * @description 更新时间
       */
      updateTime?: string;
      /**
       * Format: int64
       * @description 更新人
       */
      updateBy?: number;
      /** @description 更新人账号 */
      updateByName?: string;
    };
    /** @description 表格分页数据对象 */
    TableDataInfoTestDemoVo: {
      /**
       * Format: int64
       * @description 总记录数
       */
      total?: number;
      /** @description 列表数据 */
      rows?: components['schemas']['TestDemoVo'][];
      /**
       * Format: int32
       * @description 消息状态码
       */
      code?: number;
      /** @description 消息内容 */
      msg?: string;
    };
    /** @description 响应信息主体 */
    RBoolean: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: boolean;
    };
    /** @description 登录租户对象 */
    LoginTenantVo: {
      /** @description 租户开关 */
      tenantEnabled?: boolean;
      /** @description 租户对象列表 */
      voList?: components['schemas']['TenantListVo'][];
    };
    /** @description 响应信息主体 */
    RLoginTenantVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['LoginTenantVo'];
    };
    /** @description 租户列表 */
    TenantListVo: {
      /** @description 租户编号 */
      tenantId?: string;
      /** @description 企业名称 */
      companyName?: string;
      /** @description 域名 */
      domain?: string;
    };
    /** @description 验证码信息 */
    CaptchaVo: {
      /** @description 是否开启验证码 */
      captchaEnabled?: boolean;
      uuid?: string;
      /** @description 验证码图片 */
      img?: string;
    };
    /** @description 响应信息主体 */
    RCaptchaVo: {
      /** Format: int32 */
      code?: number;
      msg?: string;
      data?: components['schemas']['CaptchaVo'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  updateAssignee: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 任务id */
        taskIds: string[];
        /** @description 办理人id */
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  updateDefinitionState: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 流程定义id */
        processDefinitionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  migrationDefinition: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 当前流程定义id */
        currentProcessDefinitionId: string;
        /** @description 需要迁移到的流程定义id */
        fromProcessDefinitionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  convertToModel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 流程定义id */
        processDefinitionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  update: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 模型数据 */
    requestBody: {
      content: {
        'application/json': components['schemas']['ModelBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  editModel: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 模型数据 */
    requestBody: {
      content: {
        'application/json': components['schemas']['ModelBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TestLeaveBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RTestLeaveVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TestLeaveBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RTestLeaveVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WfFormManageBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WfFormManageBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WfCategoryBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WfCategoryBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  editSave: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenTable'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_3: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysUserBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_3: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysUserBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  resetPwd: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysUserBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  profile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RProfileVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  updateProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysUserProfileBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  updatePwd: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 新旧密码 */
    requestBody: {
      content: {
        'application/json': components['schemas']['SysUserPasswordBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  changeStatus: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysUserBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  insertAuthRole: {
    parameters: {
      query: {
        /** @description 用户Id */
        userId: number;
        /** @description 角色ID串 */
        roleIds: number[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_4: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysRoleBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_4: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysRoleBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  dataScope: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysRoleBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  changeStatus_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysRoleBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  selectAuthUserAll: {
    parameters: {
      query: {
        /** @description 角色ID */
        roleId: number;
        /** @description 用户ID串 */
        userIds: number[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  cancelAuthUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysUserRole'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  cancelAuthUserAll: {
    parameters: {
      query: {
        /** @description 角色ID */
        roleId: number;
        /** @description 用户ID串 */
        userIds: number[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_5: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysPostBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_5: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysPostBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_6: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysNoticeBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_6: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysNoticeBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_7: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysMenuBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_7: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysMenuBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_8: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysDictTypeBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_8: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysDictTypeBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_9: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysDictDataBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_9: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysDictDataBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_10: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysDeptBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_10: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysDeptBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_11: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysConfigBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_11: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysConfigBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  updateByKey: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysConfigBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_12: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysClientBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_12: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysClientBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  changeStatus_2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysClientBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_13: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysOssConfigBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_13: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysOssConfigBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  changeStatus_3: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SysOssConfigBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_14: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TestTreeBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_14: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TestTreeBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit_15: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TestDemoBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_15: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TestDemoBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  transferTask: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 参数 */
    requestBody: {
      content: {
        'application/json': components['schemas']['TransmitBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  terminationTask: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 参数 */
    requestBody: {
      content: {
        'application/json': components['schemas']['TerminationBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  startWorkFlow: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 启动流程参数 */
    requestBody: {
      content: {
        'application/json': components['schemas']['StartProcessBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RMapStringObject'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  returnTask: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 任务id */
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteMultiInstanceExecution: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 参数 */
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteMultiBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  delegateTask: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 参数 */
    requestBody: {
      content: {
        'application/json': components['schemas']['DelegateBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  completeTask: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 办理任务参数 */
    requestBody: {
      content: {
        'application/json': components['schemas']['CompleteTaskBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  claimTask: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 任务id */
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  backProcess: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 参数 */
    requestBody: {
      content: {
        'application/json': components['schemas']['BackProcessBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  addMultiInstanceExecution: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 参数 */
    requestBody: {
      content: {
        'application/json': components['schemas']['AddMultiBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  taskUrging: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 任务催办 */
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskUrgingBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteRunInstance: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 参数 */
    requestBody: {
      content: {
        'application/json': components['schemas']['ProcessInvalidBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  cancelProcessApply: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 业务id */
        businessKey: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  deployByFile: {
    parameters: {
      query: {
        /** @description 分类 */
        categoryCode: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': {
          /**
           * Format: binary
           * @description 文件
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  saveNewModel: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 模型请求对象 */
    requestBody: {
      content: {
        'application/json': components['schemas']['ModelBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  deploy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 模型id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  copyModel: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 模型数据 */
    requestBody: {
      content: {
        'application/json': components['schemas']['ModelBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export: {
    parameters: {
      query: {
        bo: components['schemas']['TestLeaveBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_1: {
    parameters: {
      query: {
        bo: components['schemas']['WfFormManageBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  saveOrUpdate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WfDefinitionConfigBo'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_2: {
    parameters: {
      query: {
        bo: components['schemas']['WfCategoryBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  importTableSave: {
    parameters: {
      query: {
        /** @description 表名串 */
        tables: string;
        dataName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  avatar: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description 用户头像
           */
          avatarfile: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RAvatarVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  importTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  importData: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description 导入文件
           */
          file: string;
          /** @description 是否更新已存在数据 */
          updateSupport?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  export_3: {
    parameters: {
      query: {
        user: components['schemas']['SysUserBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_4: {
    parameters: {
      query: {
        role: components['schemas']['SysRoleBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_5: {
    parameters: {
      query: {
        post: components['schemas']['SysPostBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_6: {
    parameters: {
      query: {
        dictType: components['schemas']['SysDictTypeBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_7: {
    parameters: {
      query: {
        dictData: components['schemas']['SysDictDataBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_8: {
    parameters: {
      query: {
        config: components['schemas']['SysConfigBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_9: {
    parameters: {
      query: {
        bo: components['schemas']['SysClientBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  upload: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description 文件
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  upload_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description 文件
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysOssUploadVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_10: {
    parameters: {
      query: {
        operLog: components['schemas']['SysOperLogBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description token值 */
        tokenId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  forceLogout: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description token值 */
        tokenId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_11: {
    parameters: {
      query: {
        logininfor: components['schemas']['SysLogininforBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  importWithOptions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ExportDemoVo'][];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  importData_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description 导入文件
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  export_12: {
    parameters: {
      query: {
        bo: components['schemas']['TestDemoBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_16: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  addOrUpdate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  socialCallback: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 请求体 */
    requestBody: {
      content: {
        'application/json': components['schemas']['SocialLoginBody'];
      };
    };
    responses: {
      /** @description 结果 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterBody'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 登录信息 */
    requestBody: {
      content: {
        'application/json': string;
      };
    };
    responses: {
      /** @description 结果 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RLoginVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getTaskUserIdsByAddMultiInstance: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 任务id */
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getNodeList: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 流程实例id */
        processInstanceId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListWfTaskBackNode'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getTaskById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 任务id */
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RTaskVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPageByTaskWait: {
    parameters: {
      query: {
        /** @description 参数 */
        taskBo: components['schemas']['TaskBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoTaskVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPageByTaskFinish: {
    parameters: {
      query: {
        /** @description 参数 */
        taskBo: components['schemas']['TaskBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoTaskVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPageByTaskCopy: {
    parameters: {
      query: {
        /** @description 参数 */
        taskBo: components['schemas']['TaskBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoTaskVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPageByAllTaskWait: {
    parameters: {
      query: {
        /** @description 参数 */
        taskBo: components['schemas']['TaskBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoTaskVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPageByAllTaskFinish: {
    parameters: {
      query: {
        /** @description 参数 */
        taskBo: components['schemas']['TaskBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoTaskVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getListByDeleteMultiInstance: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 任务id */
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListTaskVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getProcessInstVariable: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 任务id */
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListVariableVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPageByRunning: {
    parameters: {
      query: {
        /** @description 参数 */
        bo: components['schemas']['ProcessInstanceBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoProcessInstanceVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPageByFinish: {
    parameters: {
      query: {
        /** @description 参数 */
        bo: components['schemas']['ProcessInstanceBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoProcessInstanceVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPageByCurrent: {
    parameters: {
      query: {
        /** @description 参数 */
        bo: components['schemas']['ProcessInstanceBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoProcessInstanceVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getHistoryRecord: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 业务id */
        businessKey: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListActHistoryInfoVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getHistoryList: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 业务id */
        businessKey: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RMapStringObject'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getHistoryImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 业务id */
        businessKey: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  page: {
    parameters: {
      query: {
        /** @description 参数 */
        bo: components['schemas']['ProcessDefinitionBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoProcessDefinitionVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getListByKey: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 流程定义key */
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListProcessDefinitionVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  definitionXml: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 流程定义id */
        processDefinitionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RMapStringObject'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  definitionImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 流程定义id */
        processDefinitionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  page_1: {
    parameters: {
      query: {
        /** @description 模型参数 */
        modelBo: components['schemas']['ModelBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoModel'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 模型id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RModelVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  exportZip: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 模型id */
        modelIds: string[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键 */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RTestLeaveVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list: {
    parameters: {
      query: {
        bo: components['schemas']['TestLeaveBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoTestLeaveVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_2: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键 */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RWfFormManageVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_1: {
    parameters: {
      query: {
        bo: components['schemas']['WfFormManageBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoWfFormManageVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  selectList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListWfFormManageVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getByTableNameNotDefId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 表名 */
        tableName: string;
        /** @description 流程定义id */
        definitionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListWfDefinitionConfigVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getByDefId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键 */
        definitionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RWfDefinitionConfigVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_3: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键 */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RWfCategoryVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_2: {
    parameters: {
      query: {
        bo: components['schemas']['WfCategoryBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListWfCategoryVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_4: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 表ID */
        tableId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RMapStringObject'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  synchDb: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 表ID */
        tableId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  preview: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 表ID */
        tableId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RMapStringString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  genList: {
    parameters: {
      query: {
        genTable: components['schemas']['GenTable'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoGenTable'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getCurrentDataSourceNameList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RObject'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  genCode: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 表ID */
        tableId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  download: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 表ID */
        tableId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  dataList: {
    parameters: {
      query: {
        genTable: components['schemas']['GenTable'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoGenTable'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  columnList: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 表ID */
        tableId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoGenTableColumn'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  batchGenCode: {
    parameters: {
      query: {
        /** @description 表ID串 */
        tableIdStr: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  optionselect: {
    parameters: {
      query?: {
        /** @description 用户ID串 */
        userIds?: number[];
        /** @description 部门ID */
        deptId?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysUserVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_3: {
    parameters: {
      query: {
        user: components['schemas']['SysUserBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysUserVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  listByDept: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        deptId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysUserVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_5: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 用户信息 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RUserInfoVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  deptTree: {
    parameters: {
      query: {
        dept: components['schemas']['SysDeptBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListTreeLong'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  authRole: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 用户ID */
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysUserInfoVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_6: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 用户ID */
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysUserInfoVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_7: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysUserInfoVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_4: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysSocialVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_8: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 角色ID */
        roleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysRoleVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  optionselect_1: {
    parameters: {
      query?: {
        /** @description 角色ID串 */
        roleIds?: number[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysRoleVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_5: {
    parameters: {
      query: {
        role: components['schemas']['SysRoleBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysRoleVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  roleDeptTreeselect: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 角色ID */
        roleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RDeptTreeSelectVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  unallocatedList: {
    parameters: {
      query: {
        user: components['schemas']['SysUserBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysUserVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  allocatedList: {
    parameters: {
      query: {
        user: components['schemas']['SysUserBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysUserVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_9: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 岗位ID */
        postId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysPostVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  optionselect_2: {
    parameters: {
      query?: {
        /** @description 岗位ID串 */
        postIds?: number[];
        /** @description 部门id */
        deptId?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysPostVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_6: {
    parameters: {
      query: {
        post: components['schemas']['SysPostBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysPostVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_10: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 公告ID */
        noticeId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysNoticeVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_7: {
    parameters: {
      query: {
        notice: components['schemas']['SysNoticeBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysNoticeVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_11: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 菜单ID */
        menuId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysMenuVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_13: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 菜单ID */
        menuId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  treeselect: {
    parameters: {
      query: {
        menu: components['schemas']['SysMenuBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListTreeLong'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  tenantPackageMenuTreeselect: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 租户套餐ID */
        packageId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RMenuTreeSelectVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  roleMenuTreeselect: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 角色ID */
        roleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RMenuTreeSelectVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_8: {
    parameters: {
      query: {
        menu: components['schemas']['SysMenuBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysMenuVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getRouters: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 路由信息 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListRouterVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_12: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 字典ID */
        dictId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysDictTypeVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  optionselect_3: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysDictTypeVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_9: {
    parameters: {
      query: {
        dictType: components['schemas']['SysDictTypeBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysDictTypeVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_13: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 字典code */
        dictCode: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysDictDataVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  dictType: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 字典类型 */
        dictType: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysDictDataVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_10: {
    parameters: {
      query: {
        dictData: components['schemas']['SysDictDataBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysDictDataVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_14: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 部门ID */
        deptId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysDeptVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_16: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 部门ID */
        deptId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  optionselect_4: {
    parameters: {
      query?: {
        /** @description 部门ID串 */
        deptIds?: number[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysDeptVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_11: {
    parameters: {
      query: {
        dept: components['schemas']['SysDeptBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysDeptVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  excludeChild: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 部门ID */
        deptId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysDeptVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_15: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 参数ID */
        configId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysConfigVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_12: {
    parameters: {
      query: {
        config: components['schemas']['SysConfigBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysConfigVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getConfigKey: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 参数Key */
        configKey: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_16: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键 */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysClientVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_13: {
    parameters: {
      query: {
        bo: components['schemas']['SysClientBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysClientVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  connect: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/event-stream': components['schemas']['SseEmitter'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  send: {
    parameters: {
      query: {
        /** @description 目标用户的 ID */
        userId: number;
        /** @description 要发送的消息内容 */
        msg: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  send_1: {
    parameters: {
      query: {
        /** @description 要发送的消息内容 */
        msg: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  close: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  smsCode: {
    parameters: {
      query: {
        /** @description 用户手机号 */
        phonenumber: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_14: {
    parameters: {
      query: {
        bo: components['schemas']['SysOssBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysOssVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  listByIds: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OSS对象ID串 */
        ossIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListSysOssVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  download_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OSS对象ID */
        ossId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getInfo_17: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OSS配置ID */
        ossConfigId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RSysOssConfigVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_15: {
    parameters: {
      query: {
        bo: components['schemas']['SysOssConfigBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysOssConfigVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  emailCode: {
    parameters: {
      query: {
        /** @description 邮箱 */
        email: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_16: {
    parameters: {
      query: {
        operLog: components['schemas']['SysOperLogBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysOperLogVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_18: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysUserOnline'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_17: {
    parameters: {
      query: {
        /** @description IP地址 */
        ipaddr: string;
        /** @description 用户名 */
        userName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysUserOnline'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  unlock: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_18: {
    parameters: {
      query: {
        logininfor: components['schemas']['SysLogininforBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoSysLogininforVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_19: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RCacheListInfoVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  send_2: {
    parameters: {
      query: {
        /** @description 发送内容 */
        dto: components['schemas']['WebSocketMessageDto'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_20: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 测试树ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RTestTreeVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_19: {
    parameters: {
      query: {
        bo: components['schemas']['TestTreeBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RListTestTreeVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  export_13: {
    parameters: {
      query: {
        bo: components['schemas']['TestTreeBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  sendTencent: {
    parameters: {
      query: {
        /** @description 电话号 */
        phones: string;
        /** @description 模板ID */
        templateId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RObject'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  sendAliyun: {
    parameters: {
      query: {
        /** @description 电话号 */
        phones: string;
        /** @description 模板ID */
        templateId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RObject'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  removeBlacklist: {
    parameters: {
      query: {
        /** @description 手机号 */
        phone: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RObject'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  addBlacklist: {
    parameters: {
      query: {
        /** @description 手机号 */
        phone: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RObject'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  test: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RTestSensitive'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  testLock4j: {
    parameters: {
      query: {
        key: string;
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  testLock4jLockTemplate: {
    parameters: {
      query: {
        key: string;
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  sub: {
    parameters: {
      query: {
        /** @description 通道Key */
        key: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  pub: {
    parameters: {
      query: {
        /** @description 通道Key */
        key: string;
        /** @description 发送内容 */
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  testip: {
    parameters: {
      query: {
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  testcluster: {
    parameters: {
      query: {
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  test_1: {
    parameters: {
      query: {
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  testObj: {
    parameters: {
      query: {
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_1: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
        /** @description 对象名 */
        name: string;
        /** @description 排序号 */
        orderNum: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  get: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_17: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  subscribe: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_2: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
        /** @description 订单号 */
        orderNum: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  destroy: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_18: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
        /** @description 订单号 */
        orderNum: string;
        /** @description 延迟时间(秒) */
        time: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_3: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_1: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  add_19: {
    parameters: {
      query: {
        /** @description 队列名 */
        queueName: string;
        /** @description 容量 */
        capacity: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  sendSimpleMessage: {
    parameters: {
      query: {
        /** @description 接收人 */
        to: string;
        /** @description 标题 */
        subject: string;
        /** @description 内容 */
        text: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  sendMessageWithAttachment: {
    parameters: {
      query: {
        /** @description 接收人 */
        to: string;
        /** @description 标题 */
        subject: string;
        /** @description 内容 */
        text: string;
        /** @description 附件路径 */
        filePath: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_2: {
    parameters: {
      query: {
        /** @description 国际化code */
        code: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  test2: {
    parameters: {
      query: {
        bo: components['schemas']['TestI18nBo'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RTestI18nBo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  test1: {
    parameters: {
      query: {
        str: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  exportWithOptions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  exportTemplateOne: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  exportTemplateMultiSheet: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  exportTemplateMuliti: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  test_2: {
    parameters: {
      query: {
        /** @description 测试key */
        key: string;
        /** @description 测试value */
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RMapStringTestDemoEncrypt'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInfo_21: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 测试ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RTestDemoVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  page_2: {
    parameters: {
      query: {
        bo: components['schemas']['TestDemoBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoTestDemoVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  list_20: {
    parameters: {
      query: {
        bo: components['schemas']['TestDemoBo'];
        pageQuery: components['schemas']['PageQuery'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['TableDataInfoTestDemoVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  test6: {
    parameters: {
      query: {
        key: string;
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RBoolean'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  test3: {
    parameters: {
      query: {
        key: string;
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  test2_1: {
    parameters: {
      query: {
        key: string;
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  test1_1: {
    parameters: {
      query: {
        key: string;
        value: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  tenantList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 租户列表 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RLoginTenantVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RCaptchaVo'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  authBinding: {
    parameters: {
      query: {
        tenantId: string;
        domain: string;
      };
      header?: never;
      path: {
        /** @description 登录来源 */
        source: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 结果 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RString'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  index: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteRunAndHisInstance: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 业务id */
        businessKeys: string[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteFinishAndHisInstance: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 业务id */
        businessKeys: string[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteDeployment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 部署id */
        deploymentIds: string[];
        /** @description 流程定义id */
        processDefinitionIds: string[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 模型id */
        ids: string[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_4: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键串 */
        ids: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_5: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键串 */
        ids: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_6: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键串 */
        ids: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_7: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键串 */
        ids: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_8: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 表ID串 */
        tableIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_9: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 角色ID串 */
        userIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_10: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 角色ID串 */
        roleIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_11: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 岗位ID串 */
        postIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_12: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 公告ID串 */
        noticeIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_14: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 字典ID串 */
        dictIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  refreshCache: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_15: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 字典code串 */
        dictCodes: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_17: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 参数ID串 */
        configIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  refreshCache_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_18: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 主键串 */
        ids: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_19: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OSS对象ID串 */
        ossIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_20: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OSS配置ID串 */
        ossConfigIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_21: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 日志ids */
        operIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  clean: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_22: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 日志ids */
        infoIds: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  clean_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_23: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 测试树ID串 */
        ids: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_24: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 测试ID串 */
        ids: number[];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  remove_25: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  unlockSocial: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description socialId */
        socialId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RVoid'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
}
